//======================================
//             Игра «Быки и коровы»
//======================================
//  * История изменений в конце скрипта

function Run() {

 var NumerusVersion="2.1";
 var Ts=new Date().getTime();

//--------------------------------------------------------------------
                 ///  НАСТРОЙКИ
//--------------------------------------------------------------------

 //     Режим игры

 var Rezhim = 2;      // 0 ; 1 ; 2 //      ("0" — Обычный режим, "1" — Режим "Истории", "2" — Спросить в игре)

//--------------------------------------------------------------------

 //     Параметры для "Истории"

 //  * 1-16 матчи:  идет постепенное увеличение сложности (небольшой элемент случайности)
 //  * 17-21 матчи:  идет постепенный переход в полностью случайный матч
 //  *  после 21-го матча:  все матчи одинаково случайные (исключаются только самые простые задачи)

 //     Режим бесконечной истории
 var Beskonechno = 0;      // 0 ; 1 //      ("0" — отключить, "1" — включить)

//--------------------------------------------------------------------

 //     Параметры для обычного режима

 //     Количество используемых цифр
 var Kolichestvo_tsifr = 10;      // 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 //

 //     Длина числа (по умолчанию)
 var Dlina_chisla = 0;      // 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 //    Любое другое значение включает выбор длины числа в начале каждого матча

 //   * В классической игре загадывается четырехзначное число, и для этого используются все цифры от 0 до 9

//--------------------------------------------------------------------

 //     Призовой «Бычок»

 var Prizovoj_Bychok = 7;      // от 0 до 10 //      ("0" — никогда, "1" — редко, "10" — часто)

//--------------------------------------------------------------------

 //     Расположение разделов игры

 var Razdely_igry = 1;      // 0 ; 1 //      ("0" — "записи ходов" под "сейфом", "1" — "записи ходов" рядом с "сейфом", "2" — "записи ходов" - слева, "сейф" - справа)

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// СОЗДАНИЕ СПИСКА ЦИТАТ

//  Из книги "Пословицы и поговорки Великой Отечественной войны"
//  (составитель Павел Федорович Лебедев)

 var Kn=[ "Одна у человека мать, одна у него и Родина.",   "Родина любимая – мать родимая.",   "Родина – мать, умей за нее постоять.",   "Где ни жить – Родине служить.",   "С Родиной разлука – одна мука.",   "Всякому мила своя сторона.",   "Своя земля и в горсти мила.",   "На чужой стороне и весна не красна.",   "Где кто родится, там и пригодится.",   "На чужбине родная землица во сне снится.",   "На своей стороне мило, на чужой – постыло.",   "На чужой стороне и сокола зовут вороною.",   "Всякая сосна своему лесу весть подает.",   "Родная страна – колыбель, чужая – дырявое корыто.",   "На солнце тепло, на родине добро.",   "Человек без Родины что соловей без песни.",   "Глупа та птица, которой свое гнездо не мило.",   "Кукушка кукует – по бездомью горюет.",   "Расставшийся с другом плачет семь лет, расставшийся с Родиной – всю жизнь.",   "Нет ничего на свете краше, чем Родина наша.",   "Нашей страны шире не найти в мире.",   "Русское раздолье – человеку приволье.",   "Богата русская земля – говорится не зря.",   "Я тобой горжусь, милая Русь.",   "Человек без Родины что солдат без оружия.",   "Счастье Родины дороже жизни.",   "Береги страну как зеницу ока.",   "Может, и голову сложу, а Родине послужу.",   "Нам Отчизна дорога, охраняем родные берега.",   "Пусть знает ворог: нам край свой дорог.",   "Кто любовь к Отчизне имеет, тот врага одолеет.",   "Мы бережем свою Родину-мать, за нее мы готовы жизнь отдать.",   "С нами родная земля, нам светят звезды Кремля.",   "Великие победы нас ждут впереди под лучами красной звезды.",   "Красная звезда светит всегда.",   "Теперь все дороги ведут в Москву.",   "Москва от глаз далека, да сердцу близка.",   "Москва – наша столица, Москвой народ гордится.",   "Москва – всем столицам голова.",   "Москва – столица, любо подивиться.",   "У русской столицы не видать границы.",   "По Москве ходить – глаз с нее не сводить.",   "Москва – Родины украшенье, врагам устрашение.",   "Кремль тем и красен, что с народом согласен.",   "Наша страна дружбой сильна.",   "У нас все народы живут в ладу – врагам на беду.",   "Солнце не померкнет над нами, братство – наша сила и знамя.",   "Народное братство дороже всякого богатства.",   "Если дружба велика, будет Родина крепка.",   "Дружбу нашу не разделят просторы, моря и горы.",   "Страна растет – врагов метет.",   "Не тот человек, кто для себя живет, а тот человек, кто народу силы отдает.",   "За Родину и народ иду вперед.",   "Человек без народа что дерево без плода.",   "Чтобы с врагами биться, надо всем сплотиться.",   "Не трудно врагов победить, если всем заодно быть.",   "Наш народ сплочен и един, он непобедим.",   "Кто на нас нападает, тот в могилу попадает.",   "Россия с давних пор давала врагу отпор.",   "Никогда Россия ярма не носила.",   "За наше Отечество все человечество.",   "Не летать фашистским стаям над нашим краем.",   "Мы не боимся свинцовой тучи: наши полки могучи.",   "Кто на Советский Союз покушается, тот после раскается.",   "Бей фашистов не в бровь, а в глаз – таков народа наказ.",   "Любовь к народу, ненависть к врагу – душа победы.",   "От Родины награда – сердцу отрада.",   "Отчизна родная – для нас святая.",   "Знает свет: тверже русских нет.",   "Наш народ – герой, ходит на врага стеной.",   "Сыновья русских матерей славятся удалью богатырей.",   "Наша страна героями славится.",   "Кто за Родину горой – тот истинный герой.",   "Без патриотизма не разбить фашизма.",   "Защищай Советскую державу, бей фашистскую ораву.",   "Фашистам смерть неси – не опозорь Руси.",   "Даю Родине слово: мстить фашистам сурово.",   "Во имя Отчизны своей где фашиста увидел – бей.",   "За народное дело бейся смело.",   "Для Родины своей ни сил, ни жизни не жалей.",   "Жизнь отдам, а Родину не продам.",   "С родной земли – умри не сходи.",   "За Родину-мать не страшно умирать.",   "За Родину жизни не пощадим, но врагу ничего не отдадим.",   "Кому нашей земли захочется, тот под ней скорчится.",   "Родину любить – фашистов бить.",   "Бей фашистский сброд – за Родину, за народ.",   "Родину любить – верно Родине служить.",   "Родину беречь – врагов сечь.",   "Для нас война не страх – развеем врага в прах.",   "Гитлер пришел к нам незваным, а уйдет от нас драным.",   "Не придется Гитлеру из Ленинграда сделать море, а из Москвы – поле.",   "Думал Гитлер нашими землями управлять, а придется ему подыхать.",   "Штык советский молодец – скоро Гитлеру конец.",   "У Гитлера не столько расчетов, сколько просчетов.",   "Гитлер предполагает, а Красная Армия располагает.",   "Посмотрим, как Гитлер завоет, когда наши огонь по Берлину откроют.",   "Раздавим Гитлера в блин, как придем в Берлин.",   "Гитлеру-палачу местью отплачу.",   "Пора с Гитлером кончать – хватит ему рычать.",   "Гитлер и его правительство ответят за грабительство.",   "Гитлер кричит, мы весь свет разрушим, а мы Гитлера наперед задушим.",   "Сколько Гитлер ни крути, а от петли не уйти.",   "Гитлер победами хвалится, да в могилу свалится.",   "Хотел Гитлер Россию съесть, да пришлось в лужу сесть.",   "Не довелось свинье на небо дивиться, а Гитлеру в нашем огороде рыться.",   "Медведя знают по когтям, а Геббельса по лживым речам.",   "Фашистские собаки сочиняют враки.",   "Фашист брехней живет.",   "Солдаты у Гитлера вшивы, сводки у Геббельса лживы.",   "От осины не жди ягоды, от фашиста – правды.",   "Геббельс вертит языком без меры, да нет ему веры.",   "Геббельс мелет, да никто ему не верит.",   "Германия вот-вот развалится, а Геббельс все хвалится.",   "Германия пылает, а Геббельс все лает.",   "Врет, как фашистский бюллетень.",   "Как Геббельс ни врет, а наша берет.",   "Против фашистской лжи ухо востро держи.",   "Фашистские оковы всей Европе знакомы.",   "Лучше волку в зубы, чем фашистам в руки.",   "Фашист гладок, да вид его гадок.",   "Фашист от когтей до носа похож на барбоса.",   "Фашист и сатана – сущность одна.",   "Не ищи в фашисте человека – не найдешь.",   "Легче шакала превратить в голубя, чем фашиста в человека.",   "Фашистов легче убить, чем вразумить.",   "Фашистская власть – грабить и красть.",   "У фашистов особый спорт: кто больше добра сопрет.",   "Видно птицу по полету, а фашиста – по грабежам.",   "Сколько фашисту ни воровать, а виселицы не миновать.",   "Для предателя сгори хоть целый свет, лишь бы он был согрет.",   "Змея один раз в год меняет кожу, а предатель – каждый день.",   "Предатель фашисту пятки лизал, а фашист и спасибо не сказал.",   "У предателя ни Родины, ни друзей.",   "Лучше глаза лишиться, чем доброго имени.",   "Героям – слава, предателям – смерть.",   "Слава греет, позор жжет.",   "Бесчестье хуже смерти.",   "Кто с врагами пьет и гуляет, того и земля не принимает.",   "Думал фриц нашим богатством нажиться, да пришлось в могилу ложиться.",   "Не видать свинье неба, а фашистам нашего хлеба.",   "Кого к столу приглашают, а в фашиста пулю сажают.",   "Кому чарка, кому две, а фашисту – камнем по голове.",   "Угостили фашистов не водкой, а прямой наводкой.",   "Врага не уговаривай: с ним штыком разговаривай.",   "Убил фашистского гада – душа рада.",   "Съели бы фашисты русского мужика, да кишка тонка.",   "Одного фашиста убить – сто детей спасти.",   "Фашиста убить что змею: сто грехов простится.",   "Лучше смерть на поле, чем позор в неволе.",   "Чем позор и неволю терпеть, лучше в бою умереть.",   "Лучше биться орлом, чем жить зайцем.",   "Никогда фашистам не властвовать над нами, никогда не будем рабами.",   "Лучше злая пуля, чем клеймо раба.",   "Славная смерть лучше постыдной жизни.",   "Воевать – не галушки жевать.",   "Не воевать – победы не видать.",   "Слабого огонь войны испепеляет, а сильного как сталь закаляет.",   "Кто за правое дело дерется, у того двойная сила берется.",   "Наше дело правое – бей врага браво.",   "Бей фашистских властей всех мастей.",   "С какой злостью превеликой мы расправимся с фашистской кликой.",   "С врагами биться – на пули не скупиться.",   "Винтовка хлоп – и фашист в гроб.",   "Пришел фашист из Берлина – получил земли три аршина.",   "Не важно, чем бил, – важно, что фашиста убил.",   "Каждой фашистской гадине висеть на перекладине.",   "Всякому свой путь: журавлю – в небо, волку – в лес, а фашисту – в могилу.",   "Упрямого выправит дубина, а фашиста – могила.",   "Какую яму фашист копал – в такую и попал.",   "Фашисты научились воровать, а мы научились фашистов убивать.",   "Наш порог не для фашистских сапог.",   "Фашиста согнем в бараний рог, чтоб не переступал наш порог.",   "Лося бьют в осень, а фашиста всегда.",   "Наше дело святое и правое, мы расправимся с фашистскою оравою.",   "С фашистом разговор короткий: круши его прямой наводкой.",   "Кричал фашист «гоп», да получил пулю в лоб.",   "Фашиста умертвить – доброе дело сотворить.",   "На фронте воевать – славу добывать.",   "Фронт гремит – у врага земля горит.",   "Гремят вспышки на горизонте: то бьют фашистов на фронте.",   "Фашистов разгромили – и в селе порядок водворили.",   "Фашист замахнулся, да промахнулся.",   "Дрался фашист пылко, да остался без затылка.",   "Фашисты козыряли, да головы потеряли.",   "Фашисты пять раз на дню попадают в западню.",   "У фашистов брожение: попали в окружение.",   "Фашистам не все напирать – пришлось и умирать.",   "Трави фашистскую силу – огнем и штыком загоняй в могилу.",   "Чокнемся, фашист, я парень не гордый: я – прикладом, а ты – мордой.",   "На то у винтовок и ложи, чтобы бить фашиста по роже.",   "Слава русского штыка не померкнет века.",   "Штык остёр загнал фрицев в «котел».",   "Наши штыки разгромят фашистские полки.",   "Фашисты войну начали, а мы кончим.",   "Славу свою добывай в бою.",   "Почет и славу собирают по капле.",   "Народ того уважает, кто фашистов уничтожает.",   "На то мы и внуки Суворова, чтобы сражаться здорово.",   "Как учил Александр Суворов – будь к врагу суровым.",   "На краю света фашистов найдем и на суд приведем.",   "Зря фашист блиндажи строит: все равно снаряд накроет.",   "Смерть фашистской своре – на берегу и в море!",   "Солдата мать родит, отец растит, а бой учит.",   "Дерево в огне сгорает, а солдат от огня крепче бывает.",   "Кто первый бой начинает, тот скорее побеждает.",   "Пришла пора гнать фашистов со двора.",   "Фашист наступает – кричит «гут», а отступает – «Гитлер капут».",   "Красна девушка косами, солдат – орденами.",   "Ученый водит, а неуч сзади ходит.",   "Птицу обманывают кормом, а человека – словом.",   "Слово, сказанное без соображения, подобно выстрелу без прицела.",   "Говорить впустую что стрелять вхолостую.",   "У осла длинные уши, а у болтуна длинный язык.",   "У короткого ума длинный язык.",   "Слово не воробей: выпустишь – не поймаешь.",   "Скажешь – не воротишь, напишешь – не сотрешь, отрубишь – не приставишь.",   "Лучше один раз увидеть, чем сто раз услышать.",   "Острый язык – дарование, длинный язык – наказание.",   "Не всегда говори то, что знаешь, но всегда знай, что говоришь.",   "Кто много болтает, тот врагу помогает.",   "Кто зевает – победителем не бывает.",   "Храбрость города берет, а бдительность их бережет.",   "Зря не болтай у телефона: болтун – находка для шпиона.",   "Нет друга – так ищи, а найдешь – береги.",   "Ищи себе друзей таких, чтобы не было стыда от них.",   "Не ходи, дружок, в неизвестный кружок: к таким людям зайдешь, что навек пропадешь.",   "Плохой друг подобен тени: только в светлые дни его и видишь.",   "Не та дружба сильна, что в словах заключена, а та, что в бою скреплена.",   "Для друзей – пироги, для врагов – кулаки.",   "В недруге пуля что во пне, а в друге что во мне.",   "Все за одного, один за всех – вот и обеспечен в бою успех.",   "Не имей сто рублей, а имей сто друзей.",   "В дружбе – правда.",   "Кто нашел друга – нашел сокровище.",   "Сам пропадай, а товарища выручай.",   "Один в поле не воин, а вдвоем с товарищем – взвод.",   "Где дружба и лад – там и клад.",   "Где дружба и совет – там и свет.",   "Трусливый друг опаснее врага, ибо врага опасаешься, а на друга опираешься.",   "Не тот друг, кто медом мажет, а тот, кто правду скажет.",   "Недруг поддакивает, а друг спорит.",   "Дружба крепка не лестью, а правдой и честью.",   "Новых друзей наживай, а старых не забывай.",   "Прямо страху в глаза смотри – и страх смигнет.",   "Волков бояться – в лес не ходить.",   "Трус умирает тысячу раз, а смелый всего один раз.",   "Советские воины из металла скроены.",   "Чем больше героев, тем скорее фашистов зароем.",   "Храбрость – сестра победы.",   "На смелого собака лает, а трусливого – рвет.",   "Не числом, а храбростью побеждают.",   "Лучше быть мертвым героем, чем живым трусом.",   "Смелого и пуля облетит, смелый и мину перехитрит.",   "Если не будешь овцой, то волк не съест.",   "Косил Гитлер глаз на Донбасс, а Донбасс опять у нас.",   "И про солдатскую честь пословица есть.",   "Потому и смешно, что фашистам горе пришло.",   "Гитлеровским сателлитам быть разбитым.",   "Знаем, за что бьем, потому и с победой придем.",   "Кто за правое дело стоит, тот всегда победит.",   "У правого сила удвоится, говорит пословица.",   "Будет праздник и на улице нашей, всякого праздника краше.",   "Войну закончим – и мир упрочим.",   "Как фашисты нам ни грозили, а мы их сразили.",   "Фашистов разгромили – добро сотворили.",   "Хотел Гитлер покорить весь мир, да лопнул как мыльный пузырь.",   "Задохнулась фашистская стая девятого мая.",   "Разбили фашистскую орду в сорок пятом году.",   "Прогнали фрицев – можно веселиться.",   "Советская Армия врага разгромила, она стоит на страже мира.",   "Курские леса и дубравы полны легендарной славы.",   "Виден в курских лесах боевой размах.",   "Защитим курские дубравы от фашистской оравы!",   "В курских городах разбили фашистов в прах.",   "Как фашисты ни рвались к Курску – не дали им спуску.",   "Бей врага, Суджа, зарывай глубже." ];

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОБЩИЕ ПЕРЕМЕННЫЕ

         //  Для циклов
 var n;
 var m;
 var i;
 var j;

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ВАЛИДАЦИЯ НАСТРОЕК

         //  Валидация длины числа
 var Vybor_dliny = true;
 var lengthNum=4;
 if ((Dlina_chisla+"").search(/^[0-9]+$/) != -1  &&  +Dlina_chisla > 1  &&  +Dlina_chisla <= 10) {
         lengthNum= +Dlina_chisla;
         Vybor_dliny = false;
         }

         //  Валидация количества используемых цифр
 var num_Num=10;
 if ((Kolichestvo_tsifr+"").search(/^[0-9]+$/) != -1  &&  +Kolichestvo_tsifr > 1  &&  +Kolichestvo_tsifr <= 10)
         num_Num= +Kolichestvo_tsifr;
 Kolichestvo_tsifr = num_Num;    //  Сохранение валидного числа цифр.

         //  Валидация бычков
 var vBychok=5;
 if ((Prizovoj_Bychok+"").search(/^[0-9]+$/) != -1  &&  +Prizovoj_Bychok >= 0  &&  +Prizovoj_Bychok <= 10)
         vBychok= +Prizovoj_Bychok;

         //  Лагорифмизация бычков
 if (vBychok != 0)
         vBychok = Math.pow(0.78, vBychok-1);
     else  vBychok = 10000;

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Генератор случайных чисел"

 var T_random = Ts;   //  Показания времени для генератора случайных чисел.
 var rndN;

 function Rnd(rndN) {
         T_random += Math.random()*2000;                  //  Изменение ключевой переменной.
         return ("0000000"+Math.tan(T_random)).replace(/[\.\-]/g, "").replace(/.+(\d\d\d\d\d\d)\d$/g, "0.$1")*rndN;  //  Генерация случайных чисел от 0 до "rndN".
         }


/*         //  проверка генератора (выключено)
var proverka_generatora = "";
for (i=0; i<40000; i++) {
         proverka_generatora += Math.floor(Rnd(100)) + "\n";
         }
window.clipboardData.setData("text",proverka_generatora);  //  Отправка в буфер обмена 40000 целых случайных чисел от 0 до 99
return;   //  выход из скрипта
*/

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Генератор случайных чисел, с округлением"

 function Rn_(rndN) {
         T_random += Math.random()*2000;                  //  Изменение ключевой переменной.
         return Math.floor(("0000000"+Math.tan(T_random)).replace(/[\.\-]/g, "").replace(/.+(\d\d\d\d\d\d)\d$/g, "0.$1")*rndN);  //  Генерация случайных чисел от 0 до "rndN".
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Создание последовательности случайных не повторяющихся чисел"

 var mRjad=[];   //  Ряд случайных чисел из функции.

 function Rjad(a, b) {

         var a;
         var b;

         m = b - a + 1;
         for (n=0; n<a; n++) {
                 mRjad[n] = Rn_(m);  //  Генерация случайных чисел.
                 m++;
                 }
         //  * Для 4 чисел из 9 получаем:  1-е число = 0-5;  2-е число = 0-6;  3-е число = 0-7;  4-е число = 0-8 (числа могут быть одинаковыми)

         for (n=1; n<a; n++)
                 for  (m=0; m<n; m++)
                         if (mRjad[m] >= mRjad[n])
                                 mRjad[m]++;
         //  * Для 4 чисел из 9 получаем:  1-е число = 0-8;  2-е число = 0-8;  3-е число = 0-8;  4-е число = 0-8 (все числа разные)
         //  ** Если образно, то в этом алгоритме, все последующие числа как бы "вклиниваются" во все предыдущие числа, и тем самым поднимают их на единицу.

         return mRjad;
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "История: Получение длины числа, и количества используемых цифр"

 var Lvl;

 function HistMatch(Lvl) {

         if (Lvl>21)      //  Для матча дальше 21-го
                 Lvl = 21;   //  параметры уровня сложности одни и те же.

         var length_Num = mHistMin[Lvl] + Rnd(mHistMax[Lvl] - mHistMin[Lvl] + 1);   //  Получение не округленного значения длины числа для очередного матча.
         lengthNum = Math.floor(length_Num);                                       //  Округленное значение длины числа.

         length_Num = Math.pow((length_Num-lengthNum)*0.99, 0.5);    //  Дробная часть не округленного значения, увеличенная степенью.
         //  *  "0.99"  -  Поправка, чтобы дробная часть никогда не стала единицей.

         num_Num = lengthNum + Math.floor((11 - lengthNum)*length_Num);   //  Получение искусственно завышенного значения количества используемых цифр.

         }


         //  Тестирование генерации уровней (отключено)

 if (0) {

         var defficilie=10;    //  Выбор уровня сложности

         //  Создание схемы истории
         var mHistMin = [2,   2,   2,   3,   3,   4,   4,   5,   5,   6,   6,   7,   7,  8,   8,   9,    8,    7,   6,   5,    4,    3];   //  Минимальная длина числа для "defficilie" = 10.
         var mHistMax = [2,   3,   4,   4,   5,   5,   6,   6,   7,   7,   8,   8,   9,  9, 10, 10, 10, 10, 10, 10, 10, 10];   //  Максимальная длина числа для "defficilie" = 10.
         var lengthHist = mHistMin.length;

         for (i=0; i<lengthHist; i++) {
                 mHistMin[i] = (mHistMin[i]-2) / 8 * (defficilie - 2) + 2;   //  Изменение минимальной длины числа под выбранное значение "defficilie".
                 mHistMax[i] = (mHistMax[i]-2) / 8 * (defficilie - 2) + 2;   //  Изменение максимальной длины числа под выбранное значение "defficilie".
                 }

         for (j=1; true; j++) {
                 var  t = "эпизод	цифр	длина		\n";
                 for (i=0; i<30; i++) {
                          HistMatch(i);
                          t += "  " + (i+1) + "	  " + num_Num + "	 ";
                          for (m=0; m<lengthNum; m++) {
                                 t += "х";
                                 if ((m+1)%3 == 0)  t += " ";
                                 }
                          t += "\n";
                          }
                  if (!AskYesNo (t + "\n  Следующий случайный набор?"))   return;
                  }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Выбор уровня сложности"

 var Text;
 var otvet_1;

 function dialogus_1(msg) {
         while (true) {    //  бесконечный цикл для проверки валидации.
                 Text = window.external.InputBox(msg, "• Уровень сложности", defficilie);   //  Ввод числа и его сохранение.
                 otvet_1 = window.external.GetModalResult();                                            //  Сохранение кода нажатой кнопки.
                 if (otvet_1 == 2  ||  otvet_1 == 7  ||  Text == "")    //  Если выбраны кнопки "Отмена", "Нет", или в строке ввода отсутствует текст...
                         return;                                                                        //  выход из функции.
                 if (Text.search(/^[0-9]+$/) != -1  &&  +Text >= 3  &&  +Text <= 10) {   //  Если введенный текст валиден...
                         defficilie = +Text;         //  сохраняем текст в переменной для "сложности игры"
                         break;                               //  и выходим из цикла
                         }
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Выбор длины числа"

 var otvet_2;

 function dialogus_2(msg) {
         while (true) {    //  бесконечный цикл для проверки валидации.
                 Text = window.external.InputBox(msg, "• Длина числа", lengthNum);   //  Ввод числа и его сохранение.
                 otvet_2 = window.external.GetModalResult();                                            //  Сохранение кода нажатой кнопки.
                 if (otvet_2 == 2  ||  otvet_2 == 7  ||  Text == "")    //  Если выбраны кнопки "Отмена", "Нет", или в строке ввода отсутствует текст...
                         return;                                                                        //  выход из функции.
                 if (Text.search(/^[0-9]+$/) != -1  &&  +Text > 1  &&  +Text < 11) {   //  Если введенный текст валиден...
                         lengthNum = +Text;         //  сохраняем текст в переменной для длины числа
                         break;                               //  и выходим из цикла
                         }
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Создание числа"

 var mFunN=[];   //  Ряд случайных чисел из функции.
 var numRandom;   //  Случайное число из функции.


 function Numerus() {

         m = num_Num - lengthNum + 1;
         for (n=0; n<lengthNum; n++) {
                 mFunN[n] = Rn_(m)+1;  //  Генерация случайных цифр.
                 m++;
                 }
         //  * Для 4 цифр из 9 получаем:  1-я цифра = 1-6;  2-я цифра = 1-7;  3-я цифра = 1-8;  4-я цифра = 1-9 (цифры могут быть одинаковыми)

         for (n=1; n<lengthNum; n++)
                 for  (m=0; m<n; m++)
                         if (mFunN[m] >= mFunN[n])
                                 mFunN[m]++;
         //  * Для 4 цифр из 9 получаем:  1-я цифра = 1-9;  2-я цифра = 1-9;  3-я цифра = 1-9;  4-я цифра = 1-9 (все цифры разные)
         //  ** Если образно, то в этом алгоритме, все последующие цифры "вклиниваются" во все предыдущие цифры, и тем самым поднимают их на единицу.

         if (num_Num == 10)                             //  Если количество используемых цифр равно 10...
                 for (n=0; n<lengthNum; n++)   //  то в массиве цифр
                         mFunN[n]--;                            //  каждую уменьшаем на единицу.

         numRandom="";
         for (n=0; n<lengthNum; n++)        //  Просмотр всех цифр
                 numRandom += mFunN[n];   //  для добавления их в финальное число.

         return numRandom;
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Ввод чисел"

 var textNum = "";   //  Введенное число / или начальное число в поле ввода
 var otvet_3;                  //  Код нажатой кнопки.
 var mInputNum = [];   //  Массив из введенных цифр.
 var exit = false;            //  Индикатор выхода из игры.
 var msg = "";                //  Текст сообщения в окне.
 var msgTitle = "";       //  Заголовок окна.
 var chetyreh = [ "", "", "двух", "трёх", "четырех", "пяти", "шести", "семи", "восьми", "девяти", "десяти"];   //  Цифра текстом.
 var numMin;
 var numMax;

 function dialogus_3(msgTitle, msg) {
 aaa:
         while (true) {    //  бесконечный цикл для проверки валидации.
                 var text_Num = textNum;                   //  Сохранение текста в поле ввода.
                 textNum = window.external.InputBox(msg, msgTitle, textNum);   //  Ввод числа и его сохранение.
                 otvet_3 = window.external.GetModalResult();                                            //  Сохранение кода нажатой кнопки.
                 if (otvet_3 == 2  ||  otvet_3 == 7  ||  textNum == "") {    //  Если выбраны кнопки "Отмена", "Нет", или в строке ввода отсутствует текст...
                         if (AskYesNo("◊  Вы действительно хотите выйти из игры?  ◊                 ")) {   //  то, при получении подтверждения выхода из игры...
                                 exit=true;    //  объявляем выход из игры и
                                 return;       //  выходим из функции.
                                 }                                     //  Если нет подтверждения для выхода из игры...
                         textNum = text_Num;   //  возвращение текста в поле ввода (кнопки отказа удаляют его).
                         continue;                         //   и возвращение к началу цикла.
                         }
                 if (textNum.search(/^ы$/i) != -1) {   //  Проверка на чит-код.
                         msg = "Компьютер загадал число "+numSaveRandom+".";
                         textNum = numSaveRandom;
                         continue;
                         }
                 if (textNum.search(/[^0-9]/) != -1) {   //  Проверка на лишние символы.
                         msg="Число должно состоять только из цифр.\nНапример: "+Numerus()+".";
                         continue;
                         }
                 if (textNum.length != lengthNum) {   //  Проверка на длину числа.
                         msg = "Число должно состоять ровно из "+chetyreh[lengthNum]+" цифр.\nНапример: "+Numerus()+".";
                         continue;
                         }
                 mInputNum=textNum.match(/./g);
                 for  (n=0; n<lengthNum; n++)
                         if (mInputNum[n].search(re001) == -1) {   //  Проверка на состав цифр.
                                 msg = "Число может состоять только из цифр от "+numMin+" до "+numMax+".\nНапример: "+Numerus()+".";
                                 continue aaa;
                                 }
                 for  (n=1; n<lengthNum; n++)
                         for  (m=0; m<n; m++)
                                 if (mInputNum[m] == mInputNum[n]) {   //  Проверка на дубли цифр.
                                         msg="В числе не должна повторяться ни цифра "+mInputNum[m]+", ни какая-либо другая цифра.\nЧисло может состоять только из разных цифр. Например: "+Numerus()+".";
                                         continue aaa;
                                         }
                 break;   //  Выход из цикла.
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Открытие цифры"

 var otvet_4;                  //  Код нажатой кнопки.
 var mainMsg;                //  Сборка текста для окна.
 var i1;                             //  Сохранение номера не открытой цифры.
 var pervuju = ["первую", "вторую", "третью", "четвертую", "пятую", "шестую", "седьмую", "восьмую", "девятую", "десятую"];   //  Число текстом.
 var Pervuju = ["Первую", "Вторую", "Третью", "Четвертую", "Пятую", "Шестую", "Седьмую", "Восьмую", "Девятую", "Десятую"];   //  Число текстом.


 function dialogus_4() {

         mainMsg = " Какую цифру желаете открыть?";    //  Первая строка текста в окне.

         for (i=0; i<lengthNum; i++)    //  Поиск номера первой не открытой цифры.
                 if (! mBychok[i+1]) {              //  Если такой номер есть...
                         i1 = i;                                         //   то сохраняем этот номер,
                         mainMsg += "\n " + Pervuju[i] + "?";   //  добавляем его во вторую строку текста,
                         i++;                        //  увеличиваем счетчик
                         break;                  //  и выходим из первого цикла.
                         }

         for (; i<lengthNum; i++)             //  Продолжаем поиск.
                 if (! mBychok[i+1]) {                    //  Если находим вторую не открытую цифру...
                         mainMsg += " Или, быть может, " + pervuju[i] + "?";   //  добавляем ее номер во вторую строку текста,
                         break;                               //  и выходим из второго цикла.
                         }

         if (i == lengthNum)             //  Если второй цикл не принес результата...
                 mainMsg += ".. Это последняя не открытая цифра.";   //  добавляем соответствующий текст.

         msg = mainMsg;   //  Сохраняем полученный текст.

         while (true) {    //  бесконечный цикл для проверки валидации.
                 Text = window.external.InputBox(msg, "• Приз", "");   //  Ввод числа и его сохранение.
                 otvet_4 = window.external.GetModalResult();             //  Сохранение кода нажатой кнопки.
                 if (otvet_4 == 2  ||  otvet_4 == 7)                                    //  Если выбраны кнопки "Отмена" или "Нет".
                         if (AskYesNo("◊  Вы действительно отказываетесь от приза? ◊                 "))
                                 return;                                                                        //  выход из функции.
                 if (Text.search(/^[0-9]+$/) != -1  &&  +Text > 0  &&  +Text <= lengthNum) {   //  Если введенный текст валиден...
                         if (mBychok[+Text]) {                                    //  Если цифра уже была открыта...
                                 msg = " Эта цифра уже открыта.\n Может быть вы хотите открыть другую цифру? Например, "+pervuju[i1]+"?";   //  сообщаем об этом
                                 continue;                  //  и возвращаемся к началу цикла.
                                 }
                         mBychok[+Text] = true;   //  Если последняя проверка пройдена - делаем цифру открытой
                         break;                               //  и выходим из цикла.
                         }
                 msg = mainMsg;   //  Если введенный текст невалиден - возвращаем основной текст сообщения.
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Обновление табло"

 function updTablo() {

         tablo.firstChild.innerHTML = "";   //  Удаление предыдущего содержимого.

         for (i=0; i<lengthNum; i++) {         //  Перебор всех позиций табло по очереди.
                 if (lengthNum==count_Byk) {             //  Если все цифры угаданы...
                         tablo.firstChild.innerHTML += "<FONT style='background: #007F46; color: #FFFFFF; padding: 1px; margin: 2px'>" + mN[i] + "</FONT>";  //  открываем очередную цифру
                         continue;            //  и возвращаемся к началу цикла.
                         }

                 if (i<count_Byk) {        //  Если номер позиции меньше количества быков...
                         if (mBychok[i+1])    //  Проверяем, открывалась ли цифра на этом месте...
                                 tablo.firstChild.innerHTML += "<FONT style='background: #007F46; color: #43E000; padding: 1px; margin: 2px'>" + mN[i] + "</FONT>";  //  Да:  показываем цифру.
                             else  tablo.firstChild.innerHTML += "<FONT style='background: #007F46; color: #007F46; padding: 1px; margin: 2px'>0</FONT>";   //  Нет:  не показываем.
                         }     //  И в обоих случаях окрашиваем позицию в цвет "быка" (зеленый)

                 if (i>=count_Byk  &&  i<count_Byk+count_Kor) {   //  Если номер позиции больше (или равно) количества быков, но меньше количества всего КРС...
                         if (mBychok[i+1])                                                     //  Проверяем, открывалась ли цифра на этом месте...
                                 tablo.firstChild.innerHTML += "<FONT style='background: #B29100; color: #43E000; padding: 1px; margin: 2px'>" + mN[i] + "</FONT>";  //  Да:  показываем цифру.
                             else  tablo.firstChild.innerHTML += "<FONT style='background: #B29100; color: #B29100; padding: 1px; margin: 2px'>0</FONT>";  //  Нет:  не показываем.
                         }     //  И в обоих случаях окрашиваем позицию в цвет "коровы" (желтый)

                 if (i>=count_Byk+count_Kor) {   //  Если номер позиции больше (или равно) количества быков и коров вместе взятых...
                         if (mBychok[i+1])                 //  Проверяем, открывалась ли цифра на этом месте...
                                 tablo.firstChild.innerHTML += "<FONT style='background: #A0A0A0; color: #43E000; padding: 1px; margin: 2px'>" + mN[i] + "</FONT>";  //  Да:  показываем цифру.
                             else  tablo.firstChild.innerHTML += "<FONT style='background: #A0A0A0; color: #A0A0A0; padding: 1px; margin: 2px'>0</FONT>";  //  Нет:  не показываем.
                         }     //  И в обоих случаях окрашиваем позицию в цвет "пустышки" (фиолетовый)
                 }

         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Склонение по падежам"

 var ok=0;   //  Тип окончания.
 var m1;       //  Последняя цифра.
 var m2;        //  Две последние цифры.
 var Numer;   //  Проверяемое число.

 function pad(Numer) {
 ok=2;                              //  Сначала предполагаем второй тип окончания (55 книг).
 m1=Numer % 10;       //  Получаем последнюю цифру.
 m2=Numer % 100;      //  Получаем две последние цифры.
 if (m2<11 || m2>19) {   //  Если две последние цифры не входят в промежуток от 11 до 19...
         if (m1==1) ok=0;           //  проверяем последнюю цифру, и если это "1", то устанавливаем нулевой тип окончания (21 книга).
         else  if (m1==2 || m1==3 || m1==4) ok=1;    }   //  А если последняя цифра, это "2", "3" или "4",  то устанавливаем первый тип окончания (22 книги).
 return ok;   //  "Возвращаем" результат функции:  Тип окончания.
 }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "Прокрутка/удаление лишних записей"

 function Scroll() {
         var b=gameBoard.getBoundingClientRect();               //  Задаем переменную для координат раздела записей игры.
         if (gameBoard.children.length > 2  &&  b.bottom > ViewHeight)   //  Если записей больше двух, и позиция нижнего края раздела записей больше высоты окна...
                 gameBoard.firstChild.removeNode(true);               //   удаляем самую первую запись.
         b=gameBoard.getBoundingClientRect();              //  Перезаписываем координаты.
         if (b.bottom > ViewHeight)           //  И если раздел записей всё ещё не влезает в окно...
                 titleG.removeNode(true);    //  удаляем заголовок игры.
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФУНКЦИЯ "подсчет времени"

 function time(T) {

         var T;                           //  Промежуток времени  (в миллисекундах).
         var tempus = "";            //  Промежуток времени (текст).
         var Thour  = Math.floor((T)/3600000);      //  Количество часов.
         var Tmin  = Math.floor((T)/60000)%60;   //  Количество минут.
         var Tsec = Math.floor((T)/1000)%60;            //  Количество секунд.

         if (Thour !=0) tempus += Thour + ":";   //  в текст добавляем целые, не нулевые значения часов,
         tempus += ("0"+Tmin).replace(/0*(\d\d)$/g, "$1:");     //  минут,
         tempus +=  ("0"+Tsec).replace(/0*(\d\d)$/g, "$1");   //  секунд,

         return tempus;   //  "Возвращаем" полученный текст.
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


 window.external.BeginUndoUnit(document,"Игра «Быки и коровы»"+NumerusVersion);    // Начало записи в систему отмен.


                 /// СОЗДАНИЕ ЗАГЛАВНОЙ СТРАНИЦЫ

 var fbwDesc=document.getElementById("fbw_desc");         //  Структура дискрипшена.

 if (document.getElementById("byki_i_korovy"))                                         //  Если в документе остался корневой раздел созданный этим скриптом...
         document.getElementById("byki_i_korovy").removeNode(true);   //  то он удаляется. (задолбался вручную удалять этот раздел после каждой мелкой ошибки)))

 var fbwGame=document.createElement("DIV");            //  создание корневого раздела "fbwGame"
 fbwDesc.insertAdjacentElement("beforeBegin", fbwGame);  //  вставка этого раздела перед "fbw_desc"

 fbwGame.className = "body";                             //  Присвоение класса <body> - Чтобы в случае чего, можно было бы вручную удалить этот раздел.
 fbwGame.fbname = "Игра «Быки и коровы»";    //  Присвоение спец. имени - Для заметности в дереве структуры.
 fbwGame.id = "byki_i_korovy";                                //  Присвоение id-имени - Для быстрого поиска этого раздела скриптом.
// fbwGame.style.display = "block";   //  (необязательный атрибут, как оказалось и без него этот раздел нормально виден).
 fbwGame.style.margin = "0 5% 0 5%";         //  Внешние поля раздела (справа и слева - по 5% общей ширины).
 fbwGame.style.height = "3000px";   //  Высота раздела: 3000 пикселей.

 window.scrollBy(fbwGame.parentNode.getBoundingClientRect().left, fbwGame.getBoundingClientRect().top);   //  Прокрутка текста до раздела fbwGame.

 var titleG = document.createElement("P");                               //  Создание строки заголовка.
 fbwGame.insertAdjacentElement("beforeEnd", titleG);          //  Её вставка в корневой раздел.
 titleG.style.fontFamily = "Cambria, Century, Book antiqua";   //  Выбор шрифта.
 titleG.style.textIndent = "0em";                                   //  Обнуление красной строки.
 titleG.style.margin = "1em";                                   //  Добавление внешних полей (ширина/высота - 1 условный символ)
 titleG.style.fontSize = "26pt";                              //  Размер шрифта: 26 пунктов.
 titleG.style.textAlign = "center";                        //  Выравнивание текста по центру (по горизонтали).
 titleG.style.color = "#EEF47C";                         //  Цвет шрифта (желтый).
 titleG.style.border = "3px solid #7F6A00";   //  Рамка: 3 пикселя, темно-желтый цвет.
 titleG.style.background = "#821A1A";        //  Цвет фона (красный).
 titleG.innerHTML = "<FONT style='border: 2px solid #7F6A00; padding: 0.2em; background: #821A1A'>«Быки и Коровы»</FONT>";   //  Вставка текста и внутреннего формата.

 var rulesG = document.createElement("DIV");              //  Создание раздела правил игры.
 fbwGame.insertAdjacentElement("beforeEnd", rulesG);   //  Добавление этого раздела в корневой раздел (конец раздела).
 rulesG.style.width = "600px";                              //  Ширина раздела: 600 пикселей.
 rulesG.style.margin = "auto";                                //  Внешние поля: Максимум слева и справа, т.е. по центру.
 rulesG.style.border = "2px solid #7F6A00";    //  Рамка: 2 пикселя, темно-желтый цвет.
 rulesG.style.padding = "0.5em 2em 1em 2em";   //  Внутренние поля: верх - 0,5 усл. символа, справа/слева - 2 усл. символа, низ - 1 усл. символ.
 rulesG.style.background = "#C7DCE8";         //  Цвет фона (синий).

 var subTitleGame = document.createElement("P");            //  Создание строки заголовка для правил игры.
 rulesG.insertAdjacentElement("beforeEnd", subTitleGame);   //  Добавление этой строки в раздел правил (конец раздела).
 subTitleGame.style.fontFamily = "Cambria, Century, Book antiqua";   //  Выбор шрифта.
 subTitleGame.style.textIndent = "0em";         //  Обнуление красной строки.
 subTitleGame.style.textAlign = "center";           //  Выравнивание текста по центру (по горизонтали).
 subTitleGame.style.marginBottom = "0.3em";  //  Внешние поля: низ - 0,3 усл. символа, остальные - без изменений.
 subTitleGame.style.fontSize = "20pt";                  //  Размер шрифта: 20 пунктов.
 subTitleGame.style.color = "#8E0E00";              //  Цвет шрифта (красный).
 subTitleGame.innerHTML = "Правила игры";   //  Вставка текста.

 var strokaRG = document.createElement("P");   //  Создание строки для "Правил игры".
 rulesG.insertAdjacentElement("beforeEnd", strokaRG);   //  Добавление этой строки в раздел правил (конец раздела).
 strokaRG.style.fontFamily = "Arial, Verdana, Geneva, Helvetica, sans-serif";   //  Выбор шрифта.
 strokaRG.style.fontSize = "12pt";                        //  Размер шрифта: 12 пунктов.
 strokaRG.style.textIndent = "0em";                                //  Обнуление красной строки.
 strokaRG.style.marginBottom = "0.4em";                    //  Внешние поля: низ - 0,4 усл. символа, остальные - без изменений.
 rulesG.lastChild.innerHTML = "Компьютер загадывает число определенной длины, а вы пытаетесь его угадать.";   //  Вставка текста в эту строку.
 rulesG.insertAdjacentElement("beforeEnd", strokaRG.cloneNode(false));   //  Добавление копии оболочки этой строки в раздел с правилами.
 rulesG.lastChild.innerHTML = "Известно, что это число состоит из указанного набора цифр, причем, ни одна цифра в этом числе не повторяется."; //  Вставка текста в оболочку.
 rulesG.insertAdjacentElement("beforeEnd", strokaRG.cloneNode(false));
 rulesG.lastChild.innerHTML = "В вашем распоряжении неограниченное число попыток, в которых вы можете предлагать числа, составленные по тем же правилам. То есть, можно использовать те же цифры, и они не должны повторяться.";
 rulesG.insertAdjacentElement("beforeEnd", strokaRG.cloneNode(false));
 rulesG.lastChild.innerHTML = "На каждую вашу попытку, компьютер отвечает подсказкой, в которой он указывает, сколько цифр в вашем числе стоят на нужных местах (быки), и сколько цифр из вашего числа есть в загаданном числе, но стоят они не совсем в нужном месте (коровы).";
 rulesG.insertAdjacentElement("beforeEnd", strokaRG.cloneNode(false));
 rulesG.lastChild.innerHTML = "«Быки» отмечаются зеленым цветом, «коровы» – желтым.";
 rulesG.insertAdjacentElement("beforeEnd", strokaRG.cloneNode(false));
 rulesG.lastChild.innerHTML = "Например запись «1234 <FONT style='color: #007F46; font-size: 16pt'>•</FONT> » означает, что угадана только одна цифра, место этой цифры выбрано правильно, и эта цифра «1», «2», «3» или «4».";

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОБЩИЕ ПЕРЕМЕННЫЕ :  часть 2

 var mN=[];                           //  Загаданные цифры
 var numSaveRandom;   //  Загаданное число

 var count_Partia=0;    //  Счетчик партий

 var count_Hod=0;       //  Счетчик ходов
 var count_mainHod=0;   //  Общий счетчик ходов

 var count_Byk=0;          //  Счетчик быков (ход)
 var count_Kor=0;         //  Счетчик коров (ход)
 var count_matchByk=0;   //  Счетчик быков (матч)
 var count_matchKor=0;   //  Счетчик коров (матч)
 var count_mainByk=0;      //  Счетчик быков (всего)
 var count_mainKor=0;      //  Счетчик коров (всего)
 var count_matchGrinByk=0;   //  Счетчик малахитовых бычков (матч)
 var count_mainGrinByk=0;      //  Счетчик малахитовых бычков (всего)

 var count_Point = 0;   //  Счетчик очков
 var count_mainPoint = 0;   //  Общий счетчик очков

 var lengthAllNum = 0;   //  Сумма всех длин чисел (для среднего значения длины)

 var textHod="";         //  Одна из записей предложенных чисел

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ВЫБОР РЕЖИМА

 if (Rezhim != 2)   //  Блок для игры без выбора режима.
         MsgBox (" Добро пожаловать \n"+
                           "            в игру   \n"+
                           "«Быки и коровы» – 2                 ");

 if (Rezhim == 2)   //  Блок для вопроса выбора режима игры.
         if (AskYesNo ("           Добро пожаловать \n"+
                                     "     в игру «Быки и коровы» – 2\n"+
                                     "--------------------------------------------                 \n\n"+
                                     "• Выберите режим игры:\n"+
                                     "   ДА  —	 «История»\n"+
                                     "   НЕТ  —	 «Обычный» режим\n"))
                 Rezhim = 1;
             else  Rezhim = 0;

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// Коррекция высоты корневого раздела, и шрифта заголовка.

 var ViewHeight = window.external.getViewHeight();        //  Высота окна в пикселях.
 //  * Если скрипт запускается сразу после запуска FBE или после изменения размеров окна, то высота окна нормально определяется только после "диалога".

// fbwGame.style.height = ViewHeight+"px";   //  Высота корневого раздела  равна  высоте окна программы FBE.
//  * С "ViewHeight" лучше, но из-за изменения 3000 на ViewHeight, "бегунок" в полосе прокрутки дергается - а это не очень красиво.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ИСТОРИЯ :  пролог

 if (Rezhim == 1) {    //  Блок для Истории
         titleG.style.fontSize = "18pt";   //   Изменение шрифта заголовка: 18 пунктов.
         fbwGame.lastChild.removeNode(true);   //  Удаление последнего раздела (Правила игры);
         titleG.lastChild.innerHTML = "Пролог";   //  Изменение названия: "Пролог".

         var HistDiv = document.createElement("DIV");   //  Создание раздела "История"
         fbwGame.insertAdjacentElement("beforeEnd", HistDiv);   //  Добавление этого раздела в корневой раздел (конец раздела).
         HistDiv.style.margin = "auto";                      //  Внешние поля: Максимум слева и справа, т.е. по центру.
         HistDiv.style.width = "520px";                      //  Ширина раздела: 520 пикселей.
         HistDiv.style.padding = "10px";                     //  Внутренние поля: 10 пикселей.
         HistDiv.style.background = "#C7DCE8";      //  Цвет фона (синий).
         HistDiv.style.border = "2px solid #7F6A00";   //  Рамка: 2 пикселя, темно-желтый цвет.

         var textHist = document.createElement("P");   //  Создание строки для "Истории".
         HistDiv.insertAdjacentElement("beforeEnd", textHist);   //  Добавление этой строки в раздел "Истории" (конец раздела).
         textHist.style.fontFamily = "Arial, Verdana, Geneva, Helvetica, sans-serif";   //  Выбор шрифта.
         textHist.style.fontSize = "12pt";              //  Размер шрифта: 12 пунктов.
         textHist.style.textIndent = "2em";             //  Обнуление красной строки.
         textHist.style.marginBottom = "0.3em";   //  Внешние поля: низ - 0,3 усл. символа, остальные - без изменений.
         textHist.innerHTML = "Согласно древней легенде, смерть Кощея заключалась в игле, та иголка находилась в яйце, яйцо – в утке, утка – в зайце, а заяц – в сундуке.";
         HistDiv.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));   //  Добавление копии оболочки этой строки.
         var h_001 = ["привели", "завели"];
         var h_002 = ["на территорию заброшенного завода. Между покосившимися корпусами", "в темный дремучий лес. Меж вековых дубов", "в топкое болото. Посреди него", "в непролазную чащобу. Посреди неё", "в жаркую пустыню. Между высокими барханами", "в огромную пещеру. В её глубине, между нависающими сталактитами"];
         var h_003 = ["красного", "желтого", "оранжевого", "белого", "черного", "серого", "светлого", "темного"];
         var h_004 = ["красной", "желтой", "зеленой", "синей", "оранжевой", "пурпурной", "белой", "черной", "сиреневой", "серой", "темной"];
         var h_005 = ["невысокое здание из " + h_003[Rn_(8)] + " кирпича. Его ", "одноэтажное здание из " + h_003[Rn_(8)] + " кирпича. Его ", "бревенчатая избушка. Её ", "постройка из профильного листового железа. Её ", "темная каменная башня. Её ", "домик с " + h_004[Rn_(11)] + " черепичной крышей. Его "];
         var h_006 = ["разбиты и повсюду вокруг блестит битое стекло. ", "заколочены почерневшими досками. ", "забраны литыми решетками. ", "раскрыты, а за одним из них подозрительно шевелится занавеска. "];
         var h_007 = ["Дубовая дверь чуть приоткрыта, и как бы приглашает зайти внутрь. ", "Входная дверь висит на одной петле, и готова обрушиться в любой момент. ", "Двери нет, и в пустом проеме зияет черная пугающая пустота. "];
         HistDiv.lastChild.innerHTML = "Поиски заветной иголки " + h_001[Rn_(2)] + " вас " + h_002[Rn_(6)] + " стоит " + h_005[Rn_(6)] +" окна " +  h_006[Rn_(4)] + h_007[Rn_(3)];
         HistDiv.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         HistDiv.lastChild.innerHTML = "Внутри дома всё оказалось несколько иначе. По обе стороны простирается длинный коридор, концы которого теряются в легкой дымке. С одной стороны коридора располагаются окна, а с другой – ряд комнат и несколько лестниц ведущих на верхние этажи.";
         HistDiv.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         var floor1 = Rn_(20) + 1;
         var floor2 = 1;
         var Jetazh = ["", "первый", "второй", "третий", "четвертый", "пятый", "шестой", "седьмой", "восьмой", "девятый", "десятый", "одиннадцатый", "двенадцатый", "тринадцатый", "четырнадцатый", "пятнадцатый", "шестнадцатый", "семнадцатый", "восемнадцатый", "девятнадцатый", "двадцатый"];
         var Jetazhe = ["", "первом", "втором", "третьем", "четвертом", "пятом", "шестом", "седьмом", "восьмом", "девятом", "десятом", "одиннадцатом", "двенадцатом", "тринадцатом", "четырнадцатом", "пятнадцатом", "шестнадцатом", "семнадцатом", "восемнадцатом", "девятнадцатом", "двадцатом"];
         HistDiv.lastChild.innerHTML = "Все двери в комнаты оказались запертыми. Но после долгих блужданий по бесконечному зданию, на "+Jetazhe[floor1]+" этаже всё-таки нашлась одна дверь, которую с большим трудом удалось открыть.";

         //  Выбор уровня сложности
         var defficilie=4;
         dialogus_1("Выберете сложность игры.\n3 уровень – самый легкий;  10 уровень – максимальная сложность.");

         //  Создание схемы истории
         var mHistMin = [2,   2,   2,   3,   3,   4,   4,   5,   5,   6,   6,   7,   7,  8,   8,   9,    8,    7,   6,   5,    4,    3];   //  Минимальная длина числа для "defficilie" = 10.
         var mHistMax = [2,   3,   4,   4,   5,   5,   6,   6,   7,   7,   8,   8,   9,  9, 10, 10, 10, 10, 10, 10, 10, 10];   //  Максимальная длина числа для "defficilie" = 10.
         var lengthHist = mHistMin.length;

         for (i=0; i<lengthHist; i++) {
                 mHistMin[i] = (mHistMin[i]-2) / 8 * (defficilie - 2) + 2;   //  Изменение минимальной длины числа под выбранное значение "defficilie".
                 mHistMax[i] = (mHistMax[i]-2) / 8 * (defficilie - 2) + 2;   //  Изменение максимальной длины числа под выбранное значение "defficilie".
                 }

         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ЦИКЛ ДЛЯ СЕРИИ МАТЧЕЙ :  Общая подготовка к очередному матчу

while (!exit) {

 var Tmatch_s = new Date().getTime();   //  Точка отсчета для начала матча/эпизода.

 if (Rezhim != 1) {                             //  Блок для обычного режима.
         if (Vybor_dliny)        //  Если разрешен выбор длины числа...
                 dialogus_2("Выберете длину числа.\nВ этой игре число может иметь от 2 до 10 знаков.");   //  Запускаем соответствующую функцию.

         num_Num = Kolichestvo_tsifr;   //  Возвращаем первоначальное значение количества используемых цифр.
         if (num_Num < lengthNum)      //  Если используемых цифр меньше длины числа...
                 num_Num=lengthNum;     //  увеличиваем количество используемых цифр до длины числа.

         titleG.style.fontSize = "18pt";   //   Изменение шрифта заголовка: 18 пунктов.
         }

 if (Rezhim == 1)                       //  Если включен режим истории...
         HistMatch(count_Partia);   //  запуск функции, которая автоматически определит длину числа и количество используемых чисел.

 lengthAllNum += lengthNum;    //  Получаем сумму длин всех загаданных чисел (для среднего значения).

         //  Получение точного промежутка для цифр, которые можно использовать при вводе (используется в функции "dialogus_3").
 if (num_Num == 10) {
         numMin = 0;
         numMax = 9;
         }
 if (num_Num != 10) {
         numMin = 1;
         numMax = num_Num;
         }

 var re001 = new RegExp("^["+numMin+"-"+numMax+"]$","g");   //  Регулярное выражение для проверки введенного числа (используется в функции "dialogus_3").

 //  Создание первого ориентировочного числа для ввода (используется в функции "dialogus_3")
 textNum = "";
 for (i=1; i<=lengthNum  &&  i<10; i++)    //  в число добавляются все первые цифры
         textNum += i;
 if (lengthNum == 10)
         textNum += "0";   //  и ноль.

 var T_bonus = new Date().getTime();   //  Отметка начала отсчета (для определения возможности получения особого бычка)
 var count_bonus = 0;                                            //  Подсчет ходов (для определения возможности получения особого бычка)
 var mBychok = [false, false, false, false, false, false, false, false, false, false, false];   //  Открытые цифры.
 var if_Bychok = true;    //  Индикатор открытия всех цифр.

 count_mainPoint = count_Point;  //  Сохранение общего числа очков перед матчем/эпизодом.

 var mShkala = [1, 2, 3, 5, 7, 9, 11, 13, 15];    //  Шкала ценности матча (в очках).
 count_Point += 100*mShkala[lengthNum-2] + 20*lengthNum*num_Num;   //  Добавление половины стоимости матча к счетчику очков.

 count_matchKor=0;       //  Обнуление счетчика коров.
 count_matchByk=0;          //  Обнуление счетчика быков.
 count_matchGrinByk=0;   //  Обнуление счетчика особых бычков.

 count_Partia++;      //  Увеличение счетчика матчей/эпизодов.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ЦИКЛ ДЛЯ СЕРИИ МАТЧЕЙ :  Подготовка игрового поля

 titleG = titleG.cloneNode(true);   //  Сохранение строки заголовка перед удалением.
 fbwGame.innerHTML = "";                     //  Очистка корневого раздела.
 fbwGame.insertAdjacentElement("beforeEnd", titleG);   //  Добавление сохраненного заголовка в корневой раздел.

 if (Razdely_igry != 0) {                             //   Если выбрано размещение "записей" и "сейфа" на одном уровне:
         var key__board = document.createElement("DIV");   //  Создаем дополнительный раздел для "сейфа".
         fbwGame.insertAdjacentElement("beforeEnd", key__board);   //  Добавляем этот раздел в корневой раздел (в конец раздела).
         key__board.style.height = "200px";                     //  Высота раздела: 200 пикселей.
         key__board.style.width = "208px";                      //  Ширина раздела: 208 пикселей.
         if (Razdely_igry == 2)                                                     //  Если выбрано размещение "по краям"...
                 key__board.style.margin = "0 0 0 auto";              //  добавляем слева внешнее поле максимального размера.
             else  key__board.style.margin = "0 0 0 480px";    //  А если выбрано размещение "рядом", то добавляем поле шириной 480 пиксилей.
         key__board.style.padding = "0";                                      //  Убираем внутренние поля (их и не должно быть, но на всякий случай).
         }

 var keyboard = document.createElement("DIV");                    //  Создаем раздел "сейфа".
 if (Razdely_igry == 0)                                 //  Если выбрано размещение "сейфа" над "записями"...
         fbwGame.insertAdjacentElement("beforeEnd", keyboard);         //  то "сейф" добавляется в корневой раздел.
     else  key__board.insertAdjacentElement("beforeEnd", keyboard);   //  А если "на одном уровне", "сейф" добавляется в дополнительный раздел.
 keyboard.style.fontFamily = "Cambria, Century, Book antiqua";   //  Выбор шрифта.
 keyboard.style.width = "196px";                  //  Ширина раздела: 196 пикселей.
 keyboard.style.padding = "5px";                        //  Внутренние поля: 5 пикселей.
 keyboard.style.background = "#8E6E47";          //  Цвет фона (желтый).
 keyboard.style.border = "1px solid #3D1515";    //  Рамка: 1 пиксель, темный цвет.

 var tablo = document.createElement("P");                      //  Создание строки для "Табло".
 keyboard.insertAdjacentElement("beforeEnd", tablo);   //  Добавление этой строки в рездел "Сейфа" (конец раздела).
 tablo.style.textIndent = "0em";                     //  Обнуление красной строки.
 tablo.style.fontSize = "14pt";                             //  Размер шрифта: 14 пунктов.
 tablo.style.margin = "14px 5px 16px 5px";   //  Внешние поля
 tablo.style.textAlign = "right";                       //  Выравнивание текста по правому краю.

 for (i=0; i<lengthNum; i++)        //  Добавление позиций цифр (в начале они все сиреневые).
         tablo.innerHTML += "<FONT style='background: #9193BF; color: #9193BF; padding: 1px; margin: 2px'>0</FONT>";

 tablo.innerHTML = "<FONT style='background: #353444; padding: 3px; border: 2px solid #212121'>" + tablo.innerHTML + "</FONT> ";   //  Добавление "среднего" формата.

 var divPoint = document.createElement("DIV");     //  Создание информационного раздела в "сейфе".
 divPoint.style.height = "80px";                                                //  Высота раздела: 80 пикселей.
 keyboard.insertAdjacentElement("beforeEnd", divPoint);   //  Добавление этого раздела в "сейф" (конец раздела).

 var strokaPoint = document.createElement("P");                    //  Создание строки для очков.
 divPoint.insertAdjacentElement("beforeEnd", strokaPoint);                    //  Добавление этой строки в информационный (конец раздела).
 strokaPoint.style.fontFamily = "Arial, Verdana, Geneva, Helvetica, sans-serif";   //  Выбор шрифта.
 strokaPoint.style.textAlign = "right";           //  Выравнивание текста по правому краю.
 strokaPoint.style.margin = "0 8px 0 0";    //  Правое внешнее поле: 8 пикселей.
 strokaPoint.style.color = "#CECECE";       //  Цвет шрифта (светло-серый).
 strokaPoint.style.textIndent = "0em";      //  Обнуление красной строки.
 strokaPoint.style.fontSize = "12pt";           //  Размер шрифта: 12 пунктов.
 strokaPoint.innerHTML = count_Point;    //  Вставка текста.
 if (Rezhim == 1) {                  //  Если выбран режим истории...
         divPoint.insertAdjacentElement("beforeEnd", strokaPoint.cloneNode(false));   //  Добавление копии оболочки этой строки.
         divPoint.lastChild.innerHTML = "эт." + floor1;                                  //  Вставка текста в эту копию.
         }

 var mStyle1 = ["", "", "", "", "", "", "", "", "", "", ""];   //  Создание пустого массива для цвета надписей на кнопках.

 for (i=10; i>num_Num; i--)                     //  Добавление темно-серого цвета для "используемых" цифр.
         mStyle1[i] = "color: #A0A0A0; ";

 var strokaKB = document.createElement("P");                           //  Создание строки для кнопок (бутафория).
 keyboard.insertAdjacentElement("beforeEnd", strokaKB);   //  Добавление этой строки в раздел "сейфа".
 strokaKB.style.margin = "-80px 4px 6px 4px";     //  Внешние поля.  Верх: -80 пикселей (для наложения на информационный раздел), справа/слева: 4 пикселя, низ: 6 пикселей.
 strokaKB.style.textIndent = "0em";         //  Обнуление красной строки.
 strokaKB.style.fontSize = "14pt";            //  Размер шрифта: 14 пунктов.
 strokaKB.style.fontWeight = "bold";      //  Полужирный шрифт.
 strokaKB.style.color = "#006035";        //  Цвет шрифта (темно-зеленый).
 //  далее внутренние форматы для 11 кнопок.
 strokaKB.innerHTML = "<FONT style='background: #F1F2EA; " + mStyle1[7] + "padding: 0 0.4em 0 0.4em; border: 1px solid #404040; margin: 2px'>7</FONT>"+
                                                 "<FONT style='background: #F1F2EA; " + mStyle1[8] + "padding: 0 0.4em 0 0.4em; border: 1px solid #404040; margin: 2px'>8</FONT>"+
                                                 "<FONT style='background: #F1F2EA; " + mStyle1[9] + "padding: 0 0.4em 0 0.4em; border: 1px solid #404040; margin: 2px'>9</FONT>";
 strokaKB = strokaKB.cloneNode(false);
 keyboard.insertAdjacentElement("beforeEnd", strokaKB);
 strokaKB.style.margin = "6px 4px 6px 4px";   //  Со второй строки (и всех последующих) наложение в 80 пикселей заменяется на обычное поле в 6 пикселей.
 strokaKB.innerHTML = "<FONT style='background: #F1F2EA; " + mStyle1[4] + "padding: 0 0.4em 0 0.4em; border: 1px solid #404040; margin: 2px'>4</FONT>"+
                                                 "<FONT style='background: #F1F2EA; " + mStyle1[5] + "padding: 0 0.4em 0 0.4em; border: 1px solid #404040; margin: 2px'>5</FONT>"+
                                                 "<FONT style='background: #F1F2EA; " + mStyle1[6] + "padding: 0 0.4em 0 0.4em; border: 1px solid #404040; margin: 2px'>6</FONT>";
 strokaKB = strokaKB.cloneNode(false);
 keyboard.insertAdjacentElement("beforeEnd", strokaKB);
 strokaKB.innerHTML = "<FONT style='background: #F1F2EA; " + mStyle1[1] + "padding: 0 0.4em 0 0.4em; border: 1px solid #404040; margin: 2px'>1</FONT>"+
                                                 "<FONT style='background: #F1F2EA; " + mStyle1[2] + "padding: 0 0.4em 0 0.4em; border: 1px solid #404040; margin: 2px'>2</FONT>"+
                                                 "<FONT style='background: #F1F2EA; " + mStyle1[3] + "padding: 0 0.4em 0 0.4em; border: 1px solid #404040; margin: 2px'>3</FONT>";
 strokaKB = strokaKB.cloneNode(false);
 keyboard.insertAdjacentElement("beforeEnd", strokaKB);
 strokaKB.innerHTML = "<FONT style='background: #F1F2EA; " + mStyle1[10] + "padding: 0 0.4em 0 0.4em; border: 1px solid #404040; margin: 2px'>0</FONT>"+
                                                 "<FONT style='background: #F1F2EA; color: #A0A0A0; padding: 0 0.3em 0 0.3em; border: 1px solid #404040; margin: 2px'>Ввод</FONT>";

 var gameBoard = document.createElement("DIV");                    //  Создаем раздел для записей ходов и текста сюжета.
 fbwGame.insertAdjacentElement("beforeEnd", gameBoard);   //  Добавление этого раздела в корневой раздел (конец раздела).
 gameBoard.style.fontFamily = "Cambria, Century, Book antiqua";   //  Выбор шрифта.
 if (Razdely_igry == 0)                                             //  Если выбрано расположение "записи под сейфом"...
         gameBoard.style.margin = "8px 0 0 0";          //  Добавляем верхнее поле в 8 пикселей.
     else  gameBoard.style.margin = "-200px 0 0 0";     //  А если выбрано "записи рядом с сейфом" - добавляем наложение в 200 пикселей.
 gameBoard.style.width = "450px";          //  Ширина раздела: 450 пикселей.    (Общая ширина = 450px + 10px*2 + 1px*2 = 472px)
 gameBoard.style.padding = "10px";                  //  Внутренние поля: 10 пикселей.
 gameBoard.style.background = "#C7DCE8";           //  Цвет фона (синий).
 gameBoard.style.border = "1px solid #7F6A00";             //  Рамка: 1 пиксель, темно-желтый цвет.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ИСТОРИЯ :  Начало эпизода

 if (Rezhim == 1) {                  //  Блок для Истории
         gameBoard.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));   //  Добавление в раздел "записей" копии строки "для истории".
         if (count_Partia != 1) {                          //   Если эпизод не первый:

                 //  Сборка фрагмента текста "mFloor" (хождение по лестнице и коридору)
                 var mFloor = [];

                 var h_010 = ["Неторопливо ", "Быстро ", "Легко ", "Стремительно ", "Бодро "];
                 var h_011 = ["метров сто", "метров двести", "с добрый километр", "несколько десятков метров", "несколько шагов"];
                 var h_012 = ["", " вдоль"];
                 if (floor1 == floor2) {   //  Для случая когда этаж не изменяется.
                         mFloor[0] = h_010[Rn_(5)]+" пройдя "+h_011[Rn_(5)]+h_012[Rn_(2)] + " по коридору,";
                         mFloor[1] = "Выйдя в коридор,";
                         mFloor[2] = "В коридоре";
                         }

                 var prolety = "несколько десятков";
                 if (Math.abs(floor2 - floor1) < 5)  prolety = "несколько";
                     else  if (Math.abs(floor2 - floor1) < 7)  prolety = "с десяток";
                         else  if (Math.abs(floor2 - floor1) < 10)  prolety = "более десятка";

                 var stupenek = "несколько сотен";
                 if (Math.abs(floor2 - floor1) < 2)  stupenek = "несколько";
                     else  if (Math.abs(floor2 - floor1) < 5)  stupenek = "несколько десятков";
                         else  if (Math.abs(floor2 - floor1) < 7)  stupenek = "сотню";
                             else  if (Math.abs(floor2 - floor1) < 11)  stupenek = "более сотни";

                 var h_020 = ["Неторопливо ", "Быстро ", "Легко ", "Стремительно ", "Бодро "];
                 var h_021 = ["спустившись по лестнице", "перепрыгивая через две ступеньки", "преодолев " + prolety + " лестничных пролетов", "преодолев " + stupenek + " лестничных ступенек"];
                 if (floor1 > floor2) {   //  Для случая когда этаж понижается.
                         mFloor[0] = h_020[Rn_(5)] + h_021[Rn_(4)] + ", вы попадаете на " + Jetazh[floor2] + " этаж. Там";
                         mFloor[1] = "Спустившись на " + Jetazh[floor2] + " этаж,";
                         mFloor[2] = "На " + Jetazhe[floor2] + " этаже";
                         }

                 var h_030 = ["Неторопливо ", "Быстро ", "Легко ", "Стремительно ", "Бодро "];
                 var h_031 = ["поднявшись по лестнице", "преодолев " + prolety + " лестничных пролетов", "преодолев " + stupenek + " лестничных ступенек"];
                 if (floor1 < floor2) {   //  Для случая когда этаж повышается.
                         mFloor[0] = h_030[Rn_(5)] + h_031[Rn_(3)] + ", вы попадаете на " + Jetazh[floor2] + " этаж. Там";
                         mFloor[1] = "Поднявшись на " + Jetazh[floor2] + " этаж,";
                         mFloor[2] = "На " + Jetazhe[floor2] + " этаже";
                         }

                 floor1 = floor2;       //   Изменяем значение текущего этажа в переменной "floor1"
                 divPoint.lastChild.innerHTML = "эт." + floor1;    //  и на "сейфе".

                 //  Сборка и добавление двух строк путешествия по лестнице и коридору.
                 if (count_Partia < 6)  var h_041 = ["неожиданно ", "внезапно "];
                     else  var h_041 = ["как всегда ", "как обычно "];
                 var h_042 = ["сталкиваетесь", "сталкиваетесь нос к носу", "встречаетесь", "оказываетесь лицом к лицу"];
                 var h_043 = [["вампиром", "вампир"], ["вурдалаком", "вурдалак"], ["серым волком", "волк"], ["упырём", "упырь"], ["лешим", "леший"], ["кикиморой", "кикимора"]];
                 var bot = h_043[Rn_(6)];
                 var h_044 = ["Едва вас увидев", "Увидев вас", "Едва вас заметив", "Заметив вас"];
                 var h_045 = ["от страха ", "в страхе ", "от ужаса ", "в ужасе ", "от испуга ", "в испуге ", ""];
                 var brosaetsja = ["бросается", "пускается"];
                 var h_046 = [brosaetsja[Rn_(2)] + " наутёк", "падает в обморок", "спасается бегством", "выпрыгивает в окно"];
                 gameBoard.lastChild.innerHTML = mFloor[Rn_(3)] + " вы " + h_041[Rn_(2)] + h_042[Rn_(4)] + " с " + bot[0] + ". " + h_044[Rn_(4)] + ", " + bot[1] + " " + h_045[Rn_(6)] + h_046[Rn_(4)] + "." ;
                 gameBoard.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
                 var h_050 = ["После этого незначительного происшествия", "Преодолев это мелкое препятствие,", "После этой небольшой заминки"];
                 var h_051 = ["поворачиваете ключ", "открываете её", "заходите внутрь"];
                 gameBoard.lastChild.innerHTML = h_050[Rn_(3)] + " вы оказываетесь у нужной двери и " + h_051[Rn_(3)] + "." ;
                 gameBoard.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
                 }

         //  Сборка и добавление строки описания комнаты и сейфа (для всех эпизодов).
         var h_060 = ["красный", "желтый", "зеленый", "синий", "оранжевый", "пурпурный", "белый", "черный", "сиреневый", "серый"];
         var h_061 = ["устилает " + h_060[Rn_(10)] + " ковер", "покрывает " + h_060[Rn_(10)] + " ковер", "усыпан мелкими зелеными бумажками", "засыпан всяким мусором", "покрывает толстый слой пыли"];
         var h_062 = ["шумит лес", "до самого горизонта простирается безжизненная пустыня", "спит болото", "идет снег", "идет дождь", "туман", "ярко светит солнце", "видно пустую городскую улицу", "видно только море и скалы", "черная пустота", "сверкают молнии и грохочет гром"];
         var h_063 = ["сверху", "снизу", "из-за стены"];
         var h_064 = ["доносится непонятный стук", "доносится скрежет", "доносятся звуки перфоратора", "доносится заунывная музыка", "доносятся звуки вальса", "слышится бравурный марш", "слышится тихий шорох"];
         var h_065 = ["посередине", "в углу"];
         var h_066 = ["он – ", ""];
         var h_067 = ["медн", "железн", "крашен", "стальн", "бронированн", "каменн", "бронзов", "металлическ", "титанов", "алюминиев", "пластиков", "кованн", "монолитн", "хрустальн", "оловянн", "свинцов", "серебрян", "золот", "чугунн"];
         var h_067_2 = [["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ой", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ий", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ый", "ая", "ое"], ["ой", "ая", "ое"], ["ый", "ая", "ое"]];
         var material = Rn_(19);     //  Выбор и сохранение "материала" сейфа.
         var h_068 = ["яйца", "яйца", "утки", "утки", "зайца", "зайца", "сундука", "сундука", "яблока", "ореха", "кролика", "свиньи", "белки", "гуся", "курицы", "барана", "шара", "куба", "пирамиды", "чайника"];
         var h_068_2 = [["яйцо", 2], ["яйцо", 2], ["утка", 1], ["утка", 1], ["заяц", 0], ["заяц", 0], ["сундук", 0], ["сундук", 0], ["яблоко", 2], ["орех", 0], ["кролик", 0], ["свинья", 1], ["белка", 1], ["гусь", 0], ["курица", 1], ["баран", 0], ["шар", 0], ["куб", 0], ["пирамида", 1], ["чайник", 0]];
         //  Выбор и сохранение "формы" сейфа.
         var forma = Rn_(8);     //  Для последних сейфов "форма" выбирается из первых 8 "форм"
         if (count_Partia<5)  forma = Rn_(12) + 8;     //  Для начальных эпизодов первые 8 "форм" исключаются.
             else  if (count_Partia<9)  forma = Rn_(14) + 6;   //  Для последующих эпизодов идет постепенное включение первых "форм".
                 else  if (count_Partia<13)  forma = Rn_(16) + 4;
                     else  if (count_Partia<17)  forma = Rn_(18) + 2;
                         else  if (count_Partia<21)  forma = Rn_(6) + 2;
         var textForma = "";    //  Текст комментария относительно "формы" сейфа.
         var h_070 = [" Это знак.", ""];
         var h_071 = [" Похоже что мы на верном пути.", " Вероятно цель уже близко."];
         if (forma < 2)  textForma = " Внутри определенно должна быть иголка.";
             else  if (forma < 8)  textForma = h_070[Rn_(2)] + h_071[Rn_(2)];
         if (Beskonechno == 1) {    //  Если выбран бесконечный режим...
                 forma = Rn_(20);    //  Форма сейфа выбирается из всех вариантов.
                 textForma = "";     //  И без комментариев.
                 }
         gameBoard.lastChild.innerHTML = "Весь пол комнаты " + h_061[Rn_(4)] + ". За окном " + h_062[Rn_(11)] + ". Откуда-то " + h_063[Rn_(3)] + " " + h_064[Rn_(7)] + ". А " + h_065[Rn_(2)] + " комнаты стоит " + h_066[Rn_(2)] + h_067[material] + h_067_2[material][0] + " сейф в форме " + h_068[forma] + "." + textForma;
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ЦИКЛ ДЛЯ ОДНОГО МАТЧА (серия ходов в одном матче)

 if (Rezhim == 1)    //  Если выбрана история...
         //  то добавляется номер эпизода, и его название.
         titleG.lastChild.innerHTML = "Эпизод " + count_Partia + ". " + h_067[material].replace(/^(.).+/, "$1").toUpperCase() + h_067[material].replace(/^./, "") + h_067_2[material][h_068_2[forma][1]] + " " + h_068_2[forma][0];
     else  titleG.lastChild.innerHTML = "Матч " + count_Partia;   //  иначе, добавляется номер матча.

 numSaveRandom = Numerus();              //  Сохранение полученного случайного числа.
 mN = mFunN.slice(0, mFunN.length);   //  Сохранение полученного ряда случайных чисел в отдельном массиве.

 count_Byk=0;    //  Обнуление счетчика быков (для предотвращения пропуска цикла для матча).
 count_Hod=0;    //  Обнуление счетчика ходов.

 while (count_Byk != lengthNum) {     //  Цикл для матча. (Пока не будут найдены все быки).

         count_Kor=0;    //  Обнуление счетчика коров для одного хода.
         count_Byk=0;    //  Обнуление счетчика быков для одного хода.
         count_Hod++;   //  Увеличение счетчика ходов.

         msgTitle = "• Ход "+count_Hod;   //  Заголовок диалогового окна.
         msg="Введите число";                   //  Текст в диалоговом окне.

         dialogus_3(msgTitle, msg);   //  Запуск функции "dialogus_3" для ввода чисел.
         if (exit)  break;                           //  Если в функции был выбран выход из игры - выход из цикла для одного матча.

         if (Rezhim == 1  &&  count_Hod == 1)   //  Если это первый эпизод в истории...
                 gameBoard.innerHTML = "";     //  очистка раздела записей.

         //  Сравнение цифр загаданного и введенного числа
         for  (n=0; n<lengthNum; n++)
                 for  (m=0; m<lengthNum; m++)
                         if (mInputNum[m] == mN[n]) {   //  Если цифры совпадают...
                                 if (m == n)         //  проверяем совпадение позиций, и если они тоже совпадают...
                                         count_Byk++;   //  увеличиваем счетчик быков,
                                     else count_Kor++;   //  а если не совпадают - увеличиваем счетчик коров.
                                  }

         count_matchKor += count_Kor;   //  Добавляем число найденных коров к счетчику для всего матча.
         count_matchByk += count_Byk;   //  Добавляем число найденных быков к счетчику для всего матча.

         //  Добавляем в текст записи хода: номер хода и введенное число.
         textHod = "<FONT style='padding: 0 0.2em 0 0.2em; background: #F1F2EA; border: 1px solid #7F6A00; font-size: 70%; color: #7F6A00'>" + count_Hod + "</FONT>" + "   " + textNum+"     ";

            //  Добавляем в текст записи хода маркеры быков и коров.
         for  (n=0; n<count_Byk; n++)
                 textHod +=" <FONT style='color: #007F46'>•</FONT>";
         for  (n=0; n<count_Kor; n++)
                 textHod +=" <FONT style='color: #B29100'>•</FONT>";

         var strokaG = document.createElement("P");                     //  Создаем новую строку записи хода.
         gameBoard.insertAdjacentElement("beforeEnd", strokaG);   //  Добавляем её в раздел записей.
         strokaG.style.fontSize = "16pt";        //  Размер шрифта: 16 пунктов.
         strokaG.style.textIndent = "0em";   //  Обнуление красной строки.
         strokaG.innerHTML = textHod;       //  Вставка текста.
         Scroll();       //  Запуск функции "Scroll" для проверки видимости добавленной строки, и удаления первой записи (и заголовка), если последняя запись ушла за край окна.


         if (lengthNum == count_Byk)   //  Если угаданы все цифры...
                 count_Point += 100*mShkala[lengthNum-2] + 20*lengthNum*num_Num;   //  Добавление второй половины стоимости матча к счетчику очков.

         count_Point += 25*count_Byk + 10*count_Kor - 23*lengthNum;   //  Добавление стоимости быков и коров, вычитание стоимости хода.
         strokaPoint.innerHTML = count_Point;      //  Добавление текста  текущего счета на "сейф".

         updTablo();    //  Обновление "табло" в соответствии с новыми данными.

         count_bonus++;       //  Добавление хода в копилку для особого бычка.
         for (i=1; i<=lengthNum; i++)
                 if_Bychok = if_Bychok  &&  mBychok[i];    //  Проверка возможности открытия ещё одной цифры.
         if (! if_Bychok  &&  lengthNum != count_Byk  &&  count_Byk != 0)      //  Если есть не открытая цифра, число не разгадано, и открыт хотя бы один бык...
                 if (Rnd(200*vBychok) < count_Byk  ||  count_bonus > 50*vBychok  &&  new Date().getTime()-T_bonus > 300000*vBychok) {   //  разыгрываем особого бычка. и если он есть...
                         count_matchGrinByk++;                  //  Увеличиваем счетчик особых бычков в матче.
                         count_Point += 200;                                 //  Добавляем 200 очков.
                         strokaPoint.innerHTML = count_Point;   //  Обновляем строку счета на "сейфе".
                         T_bonus = new Date().getTime();              //  Переустанавливаем точку отсчета для особого бычка.
                         count_bonus = 0;                                         //  Обнуляем копилку ходов.
                         if (AskYesNo("        Вы нашли особого «Бычка» !!! \n · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·                 \n\n        ◊  Хотите открыть любую цифру? ◊"))  //  Спрашиваем...
                                 dialogus_4();                    //  Если "да" - запускаем функцию "dialogus_4", для открытия любой цифры.
                             else  if (! AskYesNo("◊  Вы действительно отказываетесь от приза? ◊                 "))    //  Если "нет" - контрольный вопрос.
                                     dialogus_4();    //  Если нет подтверждения - запускаем функцию "dialogus_4", для открытия любой цифры.
                         updTablo();    //  Обновление "табло" в соответствии с новыми данными.
                         }
         if_Bychok = true;   //  Предполагаем, что открыты все цифры.

         }

 if (exit)  break;   //  Если выбран выход из игры - выход из цикла серии матчей.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// Демонстрационный режим "Показать все строки"

var VseStroki_on_off = 0;      // 0 ; 1 //      ("0" — отключить, "1" — включить)

 var d=0;
 if (VseStroki_on_off ==1)  d="показать всё";

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОКНО РЕЗУЛЬТАТОВ МАТЧА

 count_mainHod +=count_Hod;                              //  Увеличение общего счетчика ходов.
 count_mainGrinByk += count_matchGrinByk;      //  Увеличение общего счетчика малахитовых бычков.
 count_mainByk += count_matchByk;      //  Увеличение общего счетчика быков.
 count_mainKor += count_matchKor;      //  Увеличение общего счетчика коров.

 var Tf=new Date().getTime();    //  Время окончания матча.

 var mSt=[];   //  Массив строк текста для вывода в окне результатов.
 ind=0;        //  Индекс строки.

 mSt[ind]="---------------------------------------------                 ";  ind++;
 if (Rezhim == 1  &&  Beskonechno != 1  &&  forma < 2  ||  d) {
         mSt[ind]="        ◊  ПОЛНАЯ ПОБЕДА !!!  ◊";  ind++; }
 if (Rezhim != 1  ||  Beskonechno == 1  ||  forma >= 2  ||  d) {
         mSt[ind]="          ◊  ВЫ ПОБЕДИЛИ !!!  ◊";  ind++; }
 mSt[ind]="---------------------------------------------";  ind++;

 mSt[ind]="  Длина числа  .  .  .  .  .  .	"+lengthNum;  ind++;
 mSt[ind]="  Ходов   .  .  .  .  .  .  .  .  .	"+count_Hod;  ind++;
 mSt[ind]="  Счет  .  .  .  .  .  .  .  .  .  .	"+(count_Point - count_mainPoint);  ind++;
 mSt[ind]="  Быков   .  .  .  .  .  .  .  .  .	"+count_matchByk;  ind++;
 mSt[ind]="  Коров   .  .  .  .  .  .  .  .  .	"+count_matchKor;  ind++;
 mSt[ind]="  Особых бычков   .  .  .  .	"+count_matchGrinByk;  ind++;
 if (Rezhim != 1  ||  d) {
         mSt[ind]="  Время матча  .  .  .  .  .  .	"+time(Tf-Tmatch_s);  ind++; }
 if (Rezhim == 1  ||  d) {
         mSt[ind]="  Время эпизода   .  .  .  .  .	"+time(Tf-Tmatch_s);  ind++; }

 if (count_Partia > 1  ||  d) {
         mSt[ind]="---------------------------------------------";  ind++;
         if (Rezhim != 1  ||  d) {
                 mSt[ind]="  Пройдено матчей .  .  .  .	"+count_Partia;  ind++; }
         if (Rezhim == 1  ||  d) {
                 mSt[ind]="  Пройдено эпизодов .  .  .	"+count_Partia;  ind++;
                 mSt[ind]="  Уровень сложности .  .  .	"+defficilie;  ind++; }
         mSt[ind]="  Ср. длина числа   .  .  .  .	" + (Math.round(lengthAllNum/count_Partia*100)/100 + "").replace(".", ",");  ind++;
         mSt[ind]="  Ходов   .  .  .  .  .  .  .  .  .	"+count_mainHod;  ind++;
         mSt[ind]="  Счет  .  .  .  .  .  .  .  .  .  .	"+count_Point;  ind++;
         mSt[ind]="  Быков   .  .  .  .  .  .  .  .  .	"+count_mainByk;  ind++;
         mSt[ind]="  Коров   .  .  .  .  .  .  .  .  .	"+count_mainKor;  ind++;
         mSt[ind]="  Особых бычков   .  .  .  .	"+count_mainGrinByk;  ind++;
         mSt[ind]="  Общее время .  .  .  .  .  .	"+time(Tf-Ts);  ind++;
         }

//  Добавление строк пословицы
 mSt[ind]="---------------------------------------------";  ind++;
 var reZit = new RegExp("([^ ].{0,34})(?=\\\s\\\s.{0,}|$)","g");   // Рег. выражение для разделения цитаты на строки.
 mSt=mSt.concat(Kn[Rn_(Kn.length)].replace(/ /g, "  ").match(reZit));   //  Добавление массива строк цитаты в основной массив.
 ind = mSt.length;    //  Определение индекса.


 var st2="";  //  Текст результатов

 for  (j=0; j!=ind; j++)
        st2+=mSt[j]+"\n";  //  Добавление элемента из массива

 MsgBox (st2);   //  Вывод окна результатов


 var strokaG = strokaG.cloneNode(false);    //  Копирование строки записи хода.
 gameBoard.insertAdjacentElement("beforeEnd", strokaG);   //  Добавление этой копии в конец раздела записей.
 strokaG.innerHTML = "<FONT style='color: #8E0E00'>      Победа!</FONT>";   //  Вставка текста.
 Scroll();    //  Запуск функции "Scroll" для проверки видимости добавленной строки, и удаления первой записи (и заголовка), если последняя запись ушла за край окна.

 if (Rezhim != 1)    //  Если выбран обычный режим...
         if (!AskYesNo(" ◊  Еще один матч?  ◊                  "))   //  Предложение сыграть еще, и в случае отказа...
                 exit = AskYesNo("◊  Вы действительно хотите выйти из игры?  ◊                 ");   //  Определение выхода с помощью контрольного вопроса.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ИСТОРИЯ :  Конец эпизода

 if (Rezhim == 1  &&  (Beskonechno == 1  ||  forma >= 2)) {    //  Блок для истории, в рядовых эпизодах.
         gameBoard.innerHTML = "";                                                                  //  Очистка Раздела записей.
         gameBoard.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));   //  Копирование строки истории в раздел записей.
         gameBoard.lastChild.innerHTML = "Победа!";                                     //  Вставка текста в эту строку.
         gameBoard.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         gameBoard.lastChild.innerHTML = "Сейф открыт.";
         gameBoard.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         h_080 = ["пузырьки с прозрачной жидкостью", "дешевая бижутерия", "сверкающие бляшки", "металлические болванки", "мелкие зеленые бумажки", "странные инструменты", "листы бумаги", "непонятные приборы"];
         Rjad(4, 8);
         while (mRjad[0]<2)
                 Rjad(4, 8);
         h_081 = ["всего", ""];
         h_082 = ["бесполезного ", ""];
         h_083 = ["мусора ", "хлама"];
         var jetazhami = ["", "этажом", "двумя этажами", "тремя этажами", "четырьмя этажами", "пятью этажами", "шестью этажами", "семью этажами", "восемью этажами", "девятью этажами", "десятью этажами", "одиннадцатью этажами", "двенадцатью этажами", "тринадцатью этажами", "четырнадцатью этажами", "пятнадцатью этажами", "шестнадцатью этажами", "семнадцатью этажами", "восемнадцатью этажами", "девятнадцатью этажами"];
         floor2 = Rn_(20) + 1;
         var textFloor = "";
         var jetazhej = [" этаж", " этажа", " этажей"];
         if (floor2 == floor1)  textFloor = "на этом же этаже";
             else  textFloor = jetazhami[Math.abs(floor2 - floor1)];
         if (floor2 > floor1)  textFloor += " выше";
         if (floor2 < floor1)  textFloor += " ниже";
         h_084 = ["располагается на " + Jetazhe[floor2] + " этаже", "расположена " + textFloor];
         gameBoard.lastChild.innerHTML = "Внутри него лежат какие-то " + h_080[mRjad[0]] + ", " + h_080[mRjad[1]] + " и " + h_080[mRjad[2]] + ".";
         gameBoard.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         gameBoard.lastChild.innerHTML = "Среди " + h_081[Rn_(2)] + " этого " + h_082[Rn_(2)] + h_083[Rn_(2)] + " вы находите ключ от комнаты, которая " + h_084[Rn_(2)] + ".";

         if (!AskYesNo(" ◊  Перейти к следующему эпизоду?  ◊                  "))   //  Предложение сыграть еще, и в случае отказа...
                 exit = AskYesNo("◊  Вы действительно хотите выйти из игры?  ◊                 ");   //  Определение выхода с помощью контрольного вопроса.
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ИСТОРИЯ :  Финал

 if (Rezhim == 1  &&  Beskonechno != 1  &&  forma < 2) {    //  Блок для истории, финал.
         titleG.lastChild.innerHTML = "Эпилог";    //  Изменение заголовка.
         if (Razdely_igry == 0)                            //  Для режима "записи под сейфом"...
                 keyboard.removeNode(true);         //  удаляем раздел "сейф".
             else  key__board.removeNode(true);   //  А для режима "записи рядом с сейфом" - удаляем дополнительный раздел, в котором лежит "сейф".
         gameBoard.removeNode(true);             //  Удаляем радел записей.
         fbwGame.insertAdjacentElement("beforeEnd", HistDiv);   //  Добавляем раздел истории
         HistDiv.innerHTML = "";                           //  Очищаем этот раздел.
         textHist.style.textAlign = "center";        //   задаем для строки истории - выравнивание по центру.
         HistDiv.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));        //  Копирование строки истории в раздел истории.
         HistDiv.lastChild.innerHTML = "<FONT style='color: #8E0E00; font-size: 20pt'>Полная победа!</FONT>";   //  Вставка текста в эту строку.
         HistDiv.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         HistDiv.lastChild.innerHTML = "В сейфе действительно оказалась иголка, которую вы тут же сломали.";
         HistDiv.lastChild.style.paddingTop = "0.5em";
         HistDiv.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         HistDiv.lastChild.innerHTML = "Кощей Бессмертный умер.";
         HistDiv.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         h_090 = ["Король пожаловал вам пол царства.", "Местный бизнесмен подарил вам 49% акций своего банка."];
         HistDiv.lastChild.innerHTML = h_090[Rn_(2)];
         HistDiv.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         h_091 = ["три дополнительных праздничных дня", "пять дополнительных праздничных дней", "семь дополнительных праздничных дней"];
         HistDiv.lastChild.innerHTML = "В стране объявили " + h_091[Rn_(3)] + ", на которых все должны были петь и веселиться.";
         textHist.style.paddingTop = "0.5em";
         HistDiv.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         HistDiv.lastChild.innerHTML = "И я там был. Чай с мёдом пил. По усам текло, а в рот не попало.";
         HistDiv.insertAdjacentElement("beforeEnd", textHist.cloneNode(false));
         HistDiv.lastChild.innerHTML = "<FONT style='color: #8E0E00'>КОНЕЦ</FONT>";

         MsgBox (" ◊  КОНЕЦ  ◊                  ");    //  Сообщение о конце игры.

         exit = true;    //  Объявление выхода из игры.
         }

}

// --------------   Конец цикла для серии матчей   -----------------
// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// УДАЛЕНИЕ ВСЕХ ЗАПИСЕЙ, которые сделал этот скрипт, и возвращение к курсору в книге

 fbwGame.removeNode(true);   //  Удаление всех записей игры.

try {
         var r=document.selection.createRange();   //  Сохранение объекта выделения/курсора в переменную.
         var b=r.getBoundingClientRect();                  //  Получение координат выделения/курсора.
         if (b.bottom-b.top <= ViewHeight)                                                  //  Если высота выделения меньше высоты окна...
                 window.scrollBy(0, (b.top+b.bottom-ViewHeight)/2);   //  то переставляем середину выделения на середину окна.
             else  window.scrollBy(0, b.top);                                //  А если нет - то переставляем начало выделения в начало окна.
         }
catch(e) {}

 window.external.EndUndoUnit(document);    // Конец записи в систему отмен.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------

}




                 ///  ИСТОРИЯ ИЗМЕНЕНИЙ

// v.1.0 — Создание скрипта — Александр Ка (08.06.2024)
// v.2.0 — Масса изменений — Александр Ка (20.03.2025)
// v.2.1 — Перенос выбора уровня сложности из "настроек" в "игру" — Александр Ка (30.04.2025)







