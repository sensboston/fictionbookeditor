//======================================
//             «Цитатный фразотрон»
//  Поиск цитат по ключевым словам
//======================================
// Скрипт тестировался в FBE v.2.7.7 (win XP, IE8 и win 7, IE11)
// * История изменений в конце скрипта
//======================================

function Run() {
 var ScriptName="«Цитатный фразотрон»";
 var NumerusVersion="1.4";
 var W = [];
 var n=0;

//--------------------------------------------------------------------
                 ///  НАСТРОЙКИ
//--------------------------------------------------------------------

         //   •  Максимум строк в окне
//  * Скрипт постарается не превышать это значение.

 var Vysota_teksta = 50;      // примерно 0-52 //

// * Для монитора 1024х768 максимальная высота окна равна 52 строкам (в win XP) и 50 строк (в win 7).
// ** Высота одной строки равна 13 пикселям, плюс рамка 87 пикселей (в win XP) или 116 пикселей (в win 7).

//--------------------------------------------------------------------

         //   •  Максимальное количество цитат

 var Max_tsitat = 100;

// ---------------------------------------------------------------

         //   •  Ключевые слова

 W[n++] = "Родин[а-я]{1,2}";     // Родина
 W[n++] = "[Сс]мысл[а-я]{0,2} жизни";     // Смысл жизни
 W[n++] = "Путин[а-я]{0,2}";     // Путин
 W[n++] = "[Пп]утинск[а-я]{2,3}";     // Путинский
 W[n++] = "[Рр]азум[а-я]{0,3}";     // Разум
 W[n++] = "[Оо]тчизн[а-я]{1,2}";     // Отчизна
 W[n++] = "[Мм]удр[а-я]{0,5}";     // Мудрость
 W[n++] = "[Ии]стин[а-я]{0,3}";     // Истина

  //  Здесь можно удалить ненужные ключевые слова, удаляя/заменяя строку или добавляя символы "//" в начале строки (тем самым отправив их в комментарий).
  //  Или можно добавить свои варианты. При этом использовать регулярные выражения желательно, но не обязательно.

// ---------------------------------------------------------------

       //   •  Подчеркивать ключевые слова

 var Podcherkivat_slova = 0;      // 0 ; 1 //      ("0" — отключить, "1" — включить)

// ---------------------------------------------------------------

       //   •  Сохранение цитат в буфере обмена

 var SaveTsitat = 0;      // 0 ; 1 //      ("0" — отключить, "1" — включить)

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОБЩИЕ ПЕРЕМЕННЫЕ

 try  { var nbspEntity=window.external.GetNBSP();  if (nbspEntity.charCodeAt(0) == 160)  nbspEntity = "&nbsp;" }
 catch(e) { var nbspEntity="&nbsp;" }

 var k=0;  //   Локальная переменная для небольших областей

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ПОИСК И ПОДСЧЕТ
                 //      (регулярные выражения)

          // Разделы
 var Ttl_ = false;       // Заголовки
 var subt_  = false;       // Подзаголовки
 var textAuthor_ = false;       // Автор текста
 var poem_ = false;       // Стихи

         //  Сборка ключевых слов
 var words = "";
 for (n=0; n < W.length; n++)
         if (W[n])
                 words += "|"+W[n];
 if (words == "")
         words = "\\\t";
     else  words = words.replace("|", "");   //  Удаление первого символа.

         // Поиск истины и мудрости
 var reTrueS = new RegExp("("+words+")([…\\\.,:;\\\?!\\\)\\\]«„“»”\\\"\\\-\\\s]|"+nbspEntity+")","g");
 var reTrue = new RegExp("(^(\\\s|"+nbspEntity+"){0,}|[…\\\.\\\?!\\\)\\\]](\\\s|"+nbspEntity+"){1,})([—–\\\-](\\\s|"+nbspEntity+"){1,}){0,1}([А-ЯA-ZЁ].{0,180}([…\\\[\\\(«„“»”\\\"\\\s]|"+nbspEntity+")){0,1}("+words+")(([…\\\.,:;\\\?!\\\)\\\]«„“»”\\\"\\\-\\\s]|"+nbspEntity+").{0,110}.{0,120}?){0,1}([…\\\.\\\?!]|$)","g");
 var count_True = 0;
 var MTrue=[];
 var massif=[];

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ПОИСК И ПОДСЧЕТ  :  Параграфы <P>
                 //      (сборка функции "HandleP")

 var sct="";  // копия абзаца без тегов и кодовых записей символов (типа "&nbsp;")


 function HandleP(ptr) {

   sct=ptr.innerText;  //  получение текста параграфа без тегов и числовых кодов

         // поиск внешнего форматирования
   Ttl_ = (ptr.parentNode.className=="title");         //   заголовки
   subt_ = (ptr.className=="subtitle");         //   подзаголовки
   textAuthor_ = (ptr.className=="text-author")         //   автор текста
   poem_ = (ptr.parentNode.className=="stanza")         //   стихи

         //  Объединение всех строк одной строфы (в стихах)
   if (poem_) {
           sct=ptr.parentNode.innerText;
           sct=sct.replace(/[\r\n]+/g, " /&/  ");  //  Временная замена разрывов строк (так удобней).
           }

         // поиск цитат
   if (!Ttl_  &&  !subt_  &&  !textAuthor_) {                                    // Фильтр для поиска цитат
           if (count_True<Max_tsitat  &&  sct.search(reTrueS)!=-1  &&  sct.search(reTrue)!=-1) {   //  Поиск цитат, и ограничитель их количества
                   massif=sct.match(reTrue);                                                //  Сохранение всех фрагментов из одного абзаца
                   for (n=0;  (n < massif.length);  n++)
                           if (massif[n].length >15)                                                 //  Пропускается только фрагмент, длиной более 15 символов
                                   { MTrue[count_True]=massif[n];  count_True++ }  //  Сохранение фрагментов текста в основном массиве
                   }
           }

   }   //  конец создания функции "HandleP(ptr)"

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ПОИСК И ПОДСЧЕТ  :  Параграфы <P>
                 //      (применение функции "HandleP")

 var div;
 var mP;
 var mPLength;
 var ptr;
 var j;
 var jj;

 var mChild = fbw_body.children;     //  Получение всех первых разделов "fbw_body"
 for (j=0;  j<mChild.length;  j++) {            //  Последовательный просмотр этих разделов
         div =   mChild[j];
         //  Далее условие для выбора раздела "DIV", который бы имел class=body, но не имел бы названия "notes" или "comments"
         if (div.nodeName == "DIV"  &&  div.className == "body"  &&  div.getAttribute("fbname") != "notes"  &&  div.getAttribute("fbname") != "comments") {
                 mP = div.getElementsByTagName("P");          //  Получение всех строк в найденном разделе
                 mPLength = mP.length;
                 for (jj=0;  jj<mPLength;  jj++) {                //  Последовательный просмотр этих строк
                         ptr = mP[jj];
                         if (ptr.parentNode.className=="stanza")            //  Если строка в стихотворной строфе,
                                 jj += ptr.parentNode.children.length - 1;        //  то другие строки этой строфы не допускаются к отправке в функцию "HandleP"
                         HandleP(ptr); }                                         //   Применение функции "HandleP"
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОКНО РЕЗУЛЬТАТОВ  :  Разбивка цитат на строки

 var reTrueS_ = new RegExp("(Путин[а-я]{0,2}|путинск[а-я]{2,3})([…\\\.,:;\\\?!\\\)\\\]«„“»”\\\"\\\-\\\s]|"+nbspEntity+")","g"); //  Для определения особого раздела
 var reS50 = new RegExp("^[…\\\.\\\?!\\\)\\\]]{0,}(\\\s|"+nbspEntity+"){1,}|(\\\s|"+nbspEntity+"){1,}[…\\\.,:;\\\?!\\\(\\\)\\\[\\\]«„“»”\\\"—–\\\-]{0,}$","g");   // Удаление лишней пунктуации
 var reS50_ = "";
 var reS60 = new RegExp("(\\\s|"+nbspEntity+"){1,}","g");   // Удвоение пробелов
 var reS60_ = "  ";
//    Пояснение  "reZit":         Разбивка на строки определенной длины
// Два пробела принимаются за один символ. Исключение: "  —", такой набор символов принимается как есть - за три символа.
//  За возможный конец строки в первую очередь принимается либо (1) набор "  /&/", либо (2) два пробела, либо (3) строка делится без учета символов
//  При удалении "  /&/", в начале следующей строки остаются четыре пробела, которые будут служить отступом "красной строки"
 var strLength = 47;   //  длина строки
 var reZit = new RegExp("^(((  (?!—)|.){0,"+(strLength*2-1)+"}?)(  /&/)|((  (?!—)|.){0,"+strLength+"})(\\\s\\\s|$)|((  (?!—)|.){0,"+strLength+"}))(.{0,})$","g");
 var reZitAlt = new RegExp("^(((  (?!—)|.){0,"+strLength+"}?)(  /&/)|((  (?!—)|.){0,"+strLength+"})(\\\s\\\s|$)|((  (?!—)|.){0,"+strLength+"}))(.{0,})$","g");
 var reZitTest = new RegExp("  (?!—)|.","g");
 var reZit_1 = "$2$5$8";
 var reZit_2 = "$10";
 var MTrue2=[];   //  Массив с цитатами, разложенными на строки
 var mWords=[];   //  Массив с ключевыми словами в одной строке
 words = words.replace(reS60, reS60_);
 var reWord_0 = new RegExp(words,"g");
 var reWord_1 = new RegExp(words,"");
 var ind=0;

 if (count_True > Max_tsitat)  count_True=Max_tsitat;   //  контрольное ограничение числа цитат (может проскочить лишняя, когда в абзаце их несколько)

 for (n=0; n<count_True; n++) {     //  Работа с отдельными цитатами
         ind=0;
         MTrue2[n] = [];                                           //  Добавление двухмерности в массив, принимающий строки цитат
         if (MTrue[n].search(reTrueS_)!=-1)  MTrue2[n][ind] = "                                   ◊ ◊ ◊ ◊ ◊";
             else  MTrue2[n][ind] = "                                      ◊ ◊ ◊";           //  Добавление обычного и особого заголовка
         ind++;
         var TrueZit = "";
         TrueZit="    "+MTrue[n].replace(reS50, reS50_).replace(reS60, reS60_);      //  Обработка цитат.
         while (TrueZit != 0) {
                 //  Разбивка цитат на строки
                 MTrue2[n][ind] = TrueZit.replace(reZit, reZit_1);
                 if (MTrue2[n][ind]!=""  &&  MTrue2[n][ind].match(reZitTest).length > strLength) {    //  В случае ошибки основной формулы...
                         reZit=reZitAlt;                                                                              //  меняем ее на альтернативную
                         MTrue2[n][ind] = TrueZit.replace(reZit, reZit_1);        //  и пересчитываем ошибочную строку
                         }
 //                ind++; MTrue2[n][ind]=MTrue2[n][ind-1].match(reZitTest).length; // длина строки
                 //  Подчеркивание ключевых слов
                 if (Podcherkivat_slova  &&  MTrue2[n][ind].search(reWord_0)!=-1) {
                         mWords=MTrue2[n][ind].match(reWord_0);    //  Сохранение в массиве всех ключевых слов из одной строки
                         for (k=0;  k < mWords.length;  k++) {
                                 mWords[k]=mWords[k].replace(/(.)/g, "$1̲").replace(/^(.)/g, "̲$1");  //  Добавление подстрочных знаков подчеркивания
                                 MTrue2[n][ind] = MTrue2[n][ind].replace(reWord_1, mWords[k]);    //  Замена обычных слов в строке на подчеркнутые
                                 }
                         }
                 //   сохранение остатка цитаты
                 TrueZit = TrueZit.replace(reZit, reZit_2);
                 ind++ }
         MTrue2[n][ind] = "						        ";  ind++;                           //  Пустая строка после цитаты
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


         ///  Функция склонения по падежам в зависимости от числа

 var ok=0;
 function pad(Numer) {
         var m1;
         var m2;
         var Numer;
         ok=2;
         m1=Numer % 10;
         m2=Numer % 100;
         if (m2<11 || m2>19) {
                 if (m1==1) ok=0;
                 else  if (m1==2 || m1==3 || m1==4) ok=1;    }
         return ok;
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОКНО РЕЗУЛЬТАТОВ  :  Перераспределение цитат по страницам

 var mSt=[];         //   массив строк цитат для одной страницы
 var page=0;   // текущий номер страницы

 var maxStrok=-2;   //  точное число строк для цитат (высота страницы без двух строк: пустая строка + диалоговая строка)
 if (Vysota_teksta > maxStrok + 2)  maxStrok=Vysota_teksta-2;

 mSt[0]=[];          //  Добавление двухмерности в первый элемент массива

 Najdeno = [ "Найдена ", "Найдены ", "Найдено " ];
 tsitat = [ " цитата", " цитаты", " цитат" ];

                                 mSt[0].push(" "+ScriptName+" v."+NumerusVersion);
                                 mSt[0].push("-------------------------------------------------------");
 if (count_True) mSt[0].push("• "+Najdeno[pad(count_True)]+count_True+tsitat[pad(count_True)]+":");
                                 mSt[0].push("						        ");

 for (n=0;  n<count_True;  n++) {
         if (mSt[page].length+MTrue2[n].length > maxStrok) {         //  Если строки цитаты не влазят на страницу...
                 for (k=mSt[page].length;  k<maxStrok;  k++)      //  то завершаем страницу пустыми строками,
                         mSt[page][k] = "";
                 page++;                             //  увеличиваем номер страницы и
                 mSt[page]=[];          //  создаем новую пустую страницу.
                 }
         mSt[page] = mSt[page].concat(MTrue2[n]);   //  Добавление всех строк цитаты на страницу.
         }

 if (page != 0)
         for (k=mSt[page].length;  k<maxStrok;  k++)   //  Завершение последней страницы пустыми строками
                 mSt[page][k] = "";

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОКНО РЕЗУЛЬТАТОВ  :  Вывод страниц на экран

         //  Создание страниц (текстом)
 var otvet;
 var mPage=[];   // массив страниц

 for (n=0;  n<=page;  n++) {        // Цикл для страниц
         mPage[n]="";
         for (k=0;  k<mSt[n].length;  k++)
                 mPage[n] += mSt[n][k]+"\n";
         if (count_True == 0) mPage[n] += ">>  Цитаты не найдены";
         if (page==0)  mPage[n] = mPage[n].replace(/\s+$/g, "");    //  удаление пробельных символов в конце единственной страницы, в т.ч. разрывы строк "\n"
         if (page!=0)  {
                 if (n!=page) mPage[n] += "◊  Стр. "+(n+1)+"  ◊  Показать  следующую  страницу?";
                         else  mPage[n]+="◊  Стр. "+(n+1)+" (последняя)  ◊  Закрыть окно?";
                 }
         }


         //  Вывод страниц на экран
 otvet = true;
 n=0;

 while (otvet) {        // Цикл для страниц
         if (page == 0) {
                 MsgBox (mPage[0]);
                 break;
                 }
         otvet = AskYesNo (mPage[n]);
         n++;
         if (n == page+1)  {
                 n=0;
                 otvet = !otvet;
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// СОХРАНЕНИЕ  :  Сборка текста цитат в буфер обмена

 if (count_True  &&  SaveTsitat  &&  AskYesNo ("◊  Сохранить текст цитат                 \n           в буфер обмена?")) {

         //  "Шапка"
         var textTsitat = "     «Цитатный фразотрон» v."+NumerusVersion+"\n" +
                                        "     ["+Najdeno[pad(count_True)]+count_True+tsitat[pad(count_True)]+"]\n" +
                                        "     ______________________________\n\n";

         //  Цитаты
         for (n=0;  n<count_True;  n++) {
                 textTsitat += "     " + MTrue[n].replace(/ \/&\/  /g, "\n     ").replace(reS50, reS50_).replace(new RegExp(nbspEntity,"g"), " ") + "\n\n";
                 }

         //  Данные книги
         var firstName;
         var middleName;
         var lastName;
         var div;
         var authorName;
         var authorNameS="";
         var tiAuthor=document.getElementById("tiAuthor");  //  раздел с авторами книги
         var mDiv = tiAuthor.getElementsByTagName("DIV");  //  массив с узлами "DIV" (каждый узел посвящен отдельному автору)

         for (j=0; j<mDiv.length; j++) {
                 div = mDiv[j];
                 firstName=div.all.first.value;               //  Получение имени.
                 middleName=div.all.middle.value;   //  Получение отчества.
                 lastName=div.all.last.value;                 //  Получение фамилии.
                 authorName="";
                 if (firstName != "")  authorName += " " + firstName;               //  Имя
                 if (middleName != "")  authorName += " " + middleName;   //  Имя + Отчество
                 if (lastName != "")  authorName += " " + lastName;                  //  Имя + Отчество + Фамилия
                 if (authorName != "")  authorNameS += "," + authorName;   //  добавление этого ФИО в строку авторов
                 }

         authorNameS = authorNameS.replace(/^, /, "");

         var bookTitle= tiTitle.value;             //  Получение названия книги

         if (authorNameS != ""  ||  bookTitle != "") {
                 textTsitat += "     ______________________________\n" +
                                           "     (из книги:  ";
                 if (authorNameS != "")  textTsitat += authorNameS;
                 if (authorNameS != ""  &&  bookTitle != "")  textTsitat += ".  ";
                 if (bookTitle != "")  textTsitat += "«" + bookTitle + "»";
                 textTsitat += ")\n\n";
                 }

         window.clipboardData.setData("text",textTsitat);       //  сохранение в буфер обмена
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------
}




                 ///  ИСТОРИЯ ИЗМЕНЕНИЙ

// v.1.0 — Создание скрипта «Статистика строк» — Александр Ка (11.02.2024)
// v.1.1  — Ряд улучшений, в основном для статистики — Александр Ка (08.06.2024)

// v.1.2  — Александр Ка (30.07.2024)
// + Разделение на два скрипта: «Цитатный фразотрон» и «Общая статистика».
// + Изменен алгоритм поиска строк.
// + Значительно улучено отображение цитат.
// + Улучшен поиск в стихах.
// + Добавлен поиск "Родины" и "смысла жизни".

// v.1.3  — Александр Ка (20.01.2025)
// + Исправление текста в окнах для win7
// + Добавлены настройки
// + Изменен алгоритм страниц
// + Добавлена возможность сохранения в буфер обмена

// v.1.4 — Мелочи — Александр Ка (29.04.2025)





