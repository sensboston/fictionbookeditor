//------------------------------------------------------------------------------------------
//             «Информацию о книге – в буфер обмена»
//  Скрипт предназначен для получения основных данных о книге
//  * Скрипт тестировался в FBE v.2.7.7 (win XP, IE8 и win 7, IE11)
//  **  История изменений в конце скрипта
//------------------------------------------------------------------------------------------

function Run() {

 var NumerusVersion="1.3";
 var Ts=new Date().getTime();
 var mW=[];
 var w=0;

// ---------------------------------------------------------------
                 ///  НАСТРОЙКИ
//--------------------------------------------------------------------

 //  Дизайн оглавления

 var Dizajn = 0;      // 0 ; 1 //      ("0" — сжатый, "1" — разряженный)

//--------------------------------------------------------------------

 //     Максимальное число имен авторов книги, которое можно добавить в текст

 var MaxAuthor = 20;      // 1 ; 2 ; 3 ; и т.д. //

// ---------------------------------------------------------------

 //     Ориентировочная максимальная длина аннотации (в символах)
 var Dlina = 1000;      // число //      (от 1 до 1000000)

 //  * При любом значении максимума, скрипт постарается не обрезать предложения.

// ---------------------------------------------------------------

         //  Расположение блоков текста
 // * здесь можно удалять (отправлять в комментарий) лишние блоки, или изменять их очередность.

 mW[w++] = "Автор";
 mW[w++] = "Название";
 mW[w++] = "Серия";
 mW[w++] = "Язык книги";
 mW[w++] = "Аннотация";
 mW[w++] = "Жанр";
 mW[w++] = "Перевод";
 mW[w++] = "Художник";
 mW[w++] = "Дополнительная информация";
 mW[w++] = "Печатное издание";
 mW[w++] = "Оглавление";
 mW[w++] = "Примечания и комментарии";

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОБЩИЕ ПЕРЕМЕННЫЕ

         //   Неразрывный пробел:  ("+nbspEntity+")
 try {
         var nbspEntity=window.external.GetNBSP();   //  Выбранный символ для н/р пробела в настройках FBE.
         if (nbspEntity.charCodeAt(0)==160)               //  Если выбран прозрачный н/р пробел...
                 nbspEntity="&nbsp;";                                        //  то этот символ записывается как код <&nbsp;>.
         }
 // Для FBE в котором отсутствуют настройки н/р пробела, и в котором команда "window.external.GetNBSP()" вызывает ошибку...
 catch(e) { var nbspEntity="&nbsp;"; }     //  символ н/р пробела всегда записывается как код <&nbsp;>.

         //  Счетчики цикла
var j = 0;
var jj = 0;
var k = 0;


 var fbwBody=document.getElementById("fbw_body");         //  Структура текста
 var fbwDesc=document.getElementById("fbw_desc");         //  Структура <description>.
 var mDesc=fbwDesc.all;         //  Все разделы <description>.

 var div;                //  один из узлов "DIV"
 var divUp;          //  узел над   "div"
 var Length;                   //  длина массива

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// Регулярные выражения (общие)

 var re01 = new RegExp("<IMG","g");               //  Замена внутренних иллюстраций на текст "&&&".
 var re01_ = "&&&<";
 var re02 = new RegExp("<A[^>]{1,}>[^А-яЁёa-z]{1,}?</A>","g");   //  Удаление текста ссылок.
 var re02_ = "";
 var re03 = new RegExp("<[^>]{1,}>","g");   //  Удаление тегов.
 var re03_ = "";
 var re04 = new RegExp("&&&","g");              //  Замена "&&&" на текст "<иллюстрация>".
 var re04_ = "<иллюстрация>";
 var re05 = new RegExp(nbspEntity,"g");    //  Замена символов н/р пробела на обычный неразрывный пробел.
 var re05_ = " ";
 var re06 = new RegExp("^[  ]{1,}|[  ]{1,}$","g");       //  Удаление начальных и конечных пробелов.
 var re06_ = "";

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// Функция склонения по падежам в зависимости от числа

 var ok=0;
 var m1;
 var m2;
 var Numer;

 function pad(Numer) {
         ok=2;
         m1=Numer % 10;
         m2=Numer % 100;
         if (m2<11 || m2>19) {
                 if (m1==1) ok=0;
                 else  if (m1==2 || m1==3 || m1==4) ok=1;    }
         return ok;
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ЖАНРЫ

 var mGenreCode = ["accounting", "adv_animal", "adv_geo", "adv_history", "adv_indian", "adv_maritime", "adv_modern", "adv_story", "adv_western", "adventure", "antique", "antique_ant", "antique_east", "antique_european", "antique_myths", "antique_russian", "aphorisms", "architecture_book", "art_criticism", "art_world_culture", "astrology", "auto_business", "auto_regulations", "banking", "child_adv", "child_classical", "child_det", "child_education", "child_folklore", "child_prose", "child_sf", "child_tale", "child_tale_rus", "child_verse", "children", "cine", "comedy", "comics", "comp_db", "comp_dsp", "comp_hard", "comp_osnet", "comp_programming", "comp_soft", "comp_www", "computers", "design", "det_action", "det_classic", "det_cozy", "det_crime", "det_espionage", "det_hard", "det_history", "det_irony", "det_maniac", "det_police", "det_political", "det_su", "detective", "diafilm", "dissident", "drama", "drama_antique", "dramaturgy", "economics", "economics_ref", "epic", "epic_poetry", "epistolary_fiction", "equ_history", "essay", "experimental_poetry", "extravaganza", "fable", "fairy_fantasy", "family", "fanfiction", "folk_songs", "folk_tale", "folklore", "foreign_antique", "foreign_children", "foreign_language", "foreign_prose", "geo_guides", "global_economy", "gothic_novel", "great_story", "historical_fantasy", "home", "home_collecting", "home_cooking", "home_crafts", "home_diy", "home_entertain", "home_garden", "home_health", "home_pets", "home_sex", "home_sport", "hronoopera", "humor", "humor_anecdote", "humor_fantasy", "humor_prose", "humor_satire", "humor_verse", "in_verse", "industries", "job_hunting", "limerick", "literature_18", "literature_19", "literature_20", "love", "love_contemporary", "love_detective", "love_erotica", "love_hard", "love_history", "love_sf", "love_short", "lyrics", "management", "marketing", "military", "military_arts", "military_history", "military_special", "military_weapon", "modern_tale", "music", "mystery", "network_literature", "nonf_biography", "nonf_criticism", "nonf_military", "nonf_publicism", "nonfiction", "notes", "nsf", "org_behavior", "other", "painting", "palindromes", "palmistry", "paper_work", "periodic", "personal_finance", "poem", "poetry", "poetry_classical", "poetry_east", "poetry_for_classical", "poetry_for_modern", "poetry_modern", "poetry_rus_classical", "poetry_rus_modern", "popadancy", "popadanec", "popular_business", "prose", "prose_abs", "prose_classic", "prose_contemporary", "prose_counter", "prose_epic", "prose_game", "prose_history", "prose_magic", "prose_military", "prose_neformatny", "prose_rus_classic", "prose_sentimental", "prose_su_classics", "proverbs", "psy_childs", "psy_sex_and_family", "psy_theraphy", "real_estate", "ref_dict", "ref_encyc", "ref_guide", "ref_ref", "reference", "religion", "religion_budda", "religion_catholicism", "religion_christianity", "religion_esoterics", "religion_hinduism", "religion_islam", "religion_judaism", "religion_orthodoxy", "religion_paganism", "religion_protestantism", "religion_rel", "religion_self", "riddles", "roman", "russian_fantasy", "sagas", "scenarios", "sci_abstract", "sci_anachem", "sci_biochem", "sci_biology", "sci_biophys", "sci_botany", "sci_build", "sci_business", "sci_chem", "sci_cosmos", "sci_crib", "sci_culture", "sci_ecology", "sci_economy", "sci_geo", "sci_history", "sci_juris", "sci_linguistic", "sci_math", "sci_medicine", "sci_medicine_alternative", "sci_metal", "sci_orgchem", "sci_oriental", "sci_pedagogy", "sci_philology", "sci_philosophy", "sci_phys", "sci_physchem", "sci_politics", "sci_popular", "sci_psychology", "sci_radio", "sci_religion", "sci_social_studies", "sci_state", "sci_tech", "sci_textbook", "sci_theories", "sci_transport", "sci_veterinary", "sci_zoo", "science", "screenplays", "sf", "sf_action", "sf_cyberpunk", "sf_detective", "sf_epic", "sf_etc", "sf_fantasy", "sf_fantasy_city", "sf_fantasy_irony", "sf_heroic", "sf_history", "sf_horror", "sf_humor", "sf_irony", "sf_litrpg", "sf_mystic", "sf_postapocalyptic", "sf_social", "sf_space", "sf_space_opera", "sf_stimpank", "sf_technofantasy", "short_story", "small_business", "song_poetry", "stock", "story", "tale_chivalry", "tbg_computers", "tbg_higher", "tbg_school", "tbg_secondary", "theatre", "thriller", "thriller_legal", "thriller_medical", "thriller_psychology", "thriller_techno", "trade", "tragedy", "travel_notes", "unfinished", "vaudeville", "vers_libre", "visual_arts", "visual_poetry", "ya"];

 var mGenre = ["Бухучет и аудит", "Природа и животные", "Путешествия и география", "Исторические приключения", "Приключения про индейцев", "Морские приключения", "Приключения в современном мире", "Авантюрный роман", "Вестерн", "Приключения", "Старинная литература", "Античная литература", "Древневосточная литература", "Древнеевропейская литература", "Мифы, легенды, эпос", "Древнерусская литература", "Афоризмы, цитаты", "Архитектура и скульптура", "Искусствоведение", "Мировая художественная культура", "Астрология", "Автодело", "Автомобили и ПДД", "Банковское дело и финансы", "Приключения для детей и подростков", "Классическая детская литература", "Детская остросюжетная литература", "Детская образовательная литература", "Детский фольклор", "Проза для детей", "Фантастика для детей", "Сказки народов мира", "Русские сказки", "Стихи для детей", "Детская литература", "Кино", "Комедия", "Комиксы", "Базы данных", "Цифровая обработка сигналов", "Аппаратное обеспечение", "ОС и сети", "Программирование", "Программы", "Интернет", "Околокомпьютерная литература", "Искусство и дизайн", "Боевик", "Классический детектив", "Дамский детективный роман", "Криминальный детектив", "Шпионский детектив", "Крутой детектив", "Исторический детектив", "Иронический детектив", "Маньяки", "Полицейский детектив", "Политический детектив", "Советский детектив", "Детективы", "Диафильмы", "Антисоветская литература", "Драма", "Античная драма", "Драматургия", "Экономика", "Деловая литература", "Былины", "Эпическая поэзия", "Эпистолярная проза", "История техники", "Эссе, очерк, этюд, набросок", "Экспериментальная поэзия", "Феерия", "Басни", "Сказочная фантастика", "Семейные отношения", "Фанфик", "Народные песни", "Народные сказки", "Фольклор", "Средневековая классическая проза", "Зарубежная литература для детей", "Иностранные языки", "Зарубежная классическая проза", "Путеводители", "Внешняя торговля", "Готический роман", "Повесть", "Историческое фэнтези", "Домоводство", "Коллекционирование", "Кулинария", "Хобби и ремесла", "Сделай сам", "Развлечения", "Сад и огород", "Здоровье", "Домашние животные", "Эротика, секс", "Спорт", "Хроноопера", "Юмор", "Анекдоты", "Юмористическое фэнтези", "Юмористическая проза", "Сатира", "Юмористические стихи", "В стихах", "Отраслевые издания", "Поиск работы, карьера", "Частушки, прибаутки, потешки", "Классическая проза XVII-XVIII веков", "Классическая проза ХIX века", "Классическая проза ХX века", "О любви", "Современные любовные романы", "Любовные детективы", "Эротическая литература", "Порно", "Исторические любовные романы", "Любовная фантастика", "Короткие любовные романы", "Лирика", "Управление, подбор персонала", "Маркетинг, PR, реклама", "Военное дело", "Боевые искусства", "Военная история", "Спецслужбы", "Военная техника и вооружение", "Современная сказка", "Музыка", "Мистерия", "Самиздат, сетевая литература", "Биографии и мемуары", "Критика", "Военная документалистика", "Публицистика", "Документальная литература", "Партитуры", "Ненаучная фантастика", "Корпоративная культура", "Неотсортированное", "Живопись, альбомы, иллюстрированные каталоги", "Палиндромы", "Хиромантия", "Делопроизводство", "Газеты и журналы", "Личные финансы", "Поэма, эпическая поэзия", "Поэзия", "Классическая поэзия", "Поэзия Востока", "Классическая зарубежная поэзия", "Современная зарубежная поэзия", "Современная поэзия", "Классическая русская поэзия", "Современная русская поэзия", "Попаданцы", "Попаданцы", "О бизнесе популярно", "Проза", "Фантасмагория, абсурдистская проза", "Классическая проза", "Современная проза", "Контркультура", "Эпопея", "Книга-игра", "Историческая проза", "Магический реализм", "О войне", "Экспериментальная, неформатная проза", "Русская классическая проза", "Сентиментальная проза", "Советская классическая проза", "Пословицы, поговорки", "Детская психология", "Секс и семейная психология", "Психотерапия и консультирование", "Недвижимость", "Словари", "Энциклопедии", "Руководства", "Справочники", "Справочная литература", "Религиозная литература", "Буддизм", "Католицизм", "Христианство", "Эзотерика", "Индуизм", "Ислам", "Иудаизм", "Православие", "Язычество", "Протестантизм", "Религия", "Самосовершенствование", "Загадки", "Роман", "Славянское фэнтези", "Семейный роман, семейная сага", "Сценарии", "Рефераты", "Аналитическая химия", "Биохимия", "Биология", "Биофизика", "Ботаника", "Строительство и сопромат", "Деловая литература", "Химия", "Астрономия и космос", "Шпаргалки", "Культурология", "Экология", "Экономика", "Геология и география", "История", "Юриспруденция", "Языкознание", "Математика", "Медицина", "Альтернативная медицина", "Металлургия", "Органическая химия", "Востоковедение", "Педагогика и воспитание", "Литературоведение", "Философия", "Физика", "Физическая химия", "Политика", "Научно-популярная литература", "Психология", "Радиоэлектроника", "Религиоведение", "Обществознание, социология", "Государство и право", "Технические науки", "Учебники и пособия", "Альтернативные науки и научные теории", "Транспорт и авиация", "Ветеринария", "Зоология", "Научная литература", "Киносценарии", "Научная фантастика", "Боевая фантастика", "Киберпанк", "Детективная фантастика", "Эпическая фантастика", "Фантастика", "Фэнтези", "Городское фэнтези", "Ироническое фэнтези", "Героическая фантастика", "Альтернативная история", "Ужасы", "Юмористическая фантастика", "Ироническая фантастика", "ЛитРПГ", "Мистика", "Постапокалипсис", "Социальная фантастика", "Космическая фантастика", "Космоопера", "Стимпанк", "Технофэнтези", "Рассказ", "Малый бизнес", "Песенная поэзия", "Ценные бумаги, инвестиции", "Новелла", "Рыцарский роман", "Учебные пособия, самоучители", "Учебники и пособия ВУЗов", "Школьные учебники и пособия, рефераты, шпаргалки", "Учебники и пособия для среднего и специального образования", "Театр", "Триллер", "Юридический триллер", "Медицинский триллер", "Психологический триллер", "Техно триллер", "Торговля", "Трагедия", "География, путевые заметки", "Незавершенное", "Водевиль", "Верлибры", "Изобразительное искусство, фотография", "Визуальная поэзия", "Подростковая литература"];
//  * 295 жанров.


 var mDiv = mDesc.tiGenre.getElementsByTagName("DIV");  //  массив с узлами "DIV" (каждый узел посвящен одному жанру).

 var bookGenre;             //  Один из жанров
 var Zhanry = "";              // Список жаров
 var count_Genre=0;      //  Счетчик жанров

 for (j=0; j<mDiv.length; j++) {              //  Просмотр всех разделов "DIV" по очереди.
         div = mDiv[j];
         bookGenre = div.all.genre.value;          //  Получение значения жанра в одном из разделов "DIV".
         if (bookGenre != "") {                                           //  Если значение не пустое...
                 count_Genre++;                                                  //  увеличение счетчика
                 Length = mGenreCode.length;
                 for (k=0; k<Length; k++)                                            //  и просмотр всех известных кодов для жанра.
                         if (mGenreCode[k] == bookGenre) {   //  Если найден такой же код...
                                 bookGenre = mGenre[k];                //  то полученное значение жанра из книги заменяем на обычное написание
                                 break;                                                     //  и выходим из цикла.
                                 }
                 Zhanry += " " + bookGenre + " ·";       //  Добавляем в список еще один жанр.
                 }
         }
 if (Zhanry != "")                                                      //  Если список с жанрами не пустой...
         Zhanry = Zhanry.replace(/ ·$/, "\n");   //  заменяем последний маркер на разрыв строки.
     else Zhanry = " <не указан>\n";               //  Если добавлять нечего, то пишем и об этом.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// АВТОРЫ

 mDiv = mDesc.tiAuthor.getElementsByTagName("DIV");  //  массив с узлами "DIV" (каждый узел посвящен отдельному автору)

 var firstName;           //  Имя.
 var middleName;     //  Отчество.
 var lastName;             //  Фамилия.
 var authorName;       //  Полное имя.
 var Avtory="";              //  Список имён.
 var count_Author=0;      //  Счетчик имен авторов.

 Length = mDiv.length;
 for (j=0; j<Length; j++) {                    //  Просмотр всех разделов "DIV" по очереди.
         div = mDiv[j];
         firstName=div.all.first.value;               //  Получение имени.
         middleName=div.all.middle.value;   //  Получение отчества.
         lastName=div.all.last.value;                 //  Получение фамилии.
         authorName="";
         if (firstName != "")  authorName += " " + firstName;               //  Имя.
         if (middleName != "")  authorName += " " + middleName;   //  Имя + Отчество.
         if (lastName != "")  authorName += " " + lastName;                  //  Имя + Отчество + Фамилия.
         if (authorName != "") {                                                                                     //  Если есть полное имя...
                 count_Author++;                                                                                            //  увеличение счетчика
                 if (count_Author <= MaxAuthor) Avtory += authorName + "\n";   //  и добавляем это имя в список авторов (если это имя не будет лишним).
                     else {                                                       //  А если оно всё-таки лишнее...
                         Avtory += " и другие\n";           //  то добавляем соответствующий текст,
                         count_Author = Length;    //  присваиваем счетчику не совсем точное число авторов
                         break;                                                  // и выходим из цикла.
                         }
                 }
         }

 if (count_Author == 0)             //  Если в книге нет имен авторов...
     Avtory= " <не указан>\n";   //  то пишем и об этом.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// НАЗВАНИЕ

 var bookTitle= mDesc.tiTitle.value;             //  Получение названия книги.

 if (bookTitle != "")                                        //  Если оно есть...
         bookTitle = " " + bookTitle + "\n";   //  проводим финальную обработку блока.
     else bookTitle = " <не указано>\n";   //  Если добавлять нечего, то пишем и об этом.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ЯЗЫК КНИГИ

 var mLangCode = ["aa", "ab", "ae", "af", "ak", "am", "ar", "as", "av", "ay", "az", "ba", "be", "bg", "bh", "bi", "bm", "bn", "bo", "br", "bs", "ca", "ce", "ch", "cm", "co", "cs", "cu", "cv", "cy", "da", "de", "dv", "dz", "ee", "el", "en", "eo", "es", "et", "eu", "fa", "ff", "fi", "fj", "fl", "fo", "fr", "fy", "ga", "gd", "gl", "gn", "gu", "gv", "ha", "he", "hi", "ho", "hr", "hu", "hy", "hz", "ia", "id", "ie", "ig", "ik", "in", "is", "it", "iu", "ja", "jv", "jw", "ka", "kg", "ki", "kj", "kk", "kl", "km", "kn", "ko", "kr", "ks", "ku", "kv", "kw", "ky", "la", "lb", "lg", "ln", "lo", "lt", "lu", "lv", "me", "mg", "mh", "mi", "mk", "ml", "mn", "mo", "mr", "ms", "mt", "my", "na", "nd", "ne", "ng", "nl", "nn", "no", "nr", "nv", "ny", "oc", "oj", "om", "or", "os", "pa", "pi", "pl", "ps", "pt", "qu", "rm", "rn", "ro", "ru", "rw", "ry", "sa", "sc", "sd", "sg", "sh", "si", "sk", "sl", "sm", "sn", "so", "sq", "sr", "ss", "st", "su", "sv", "sw", "ta", "te", "tg", "th", "ti", "tk", "tl", "tn", "to", "tr", "ts", "tt", "tw", "ty", "ug", "uk", "ur", "uz", "ve", "vi", "vo", "wo", "xh", "yi", "yo", "za", "zh", "zu"];

 var mLang1 = ["афарского", "абхазского", "авестийского", "африкаанс", "акан", "амхарского", "арабского", "ассамского", "аварского", "аймара", "азербайджанского", "башкирского", "белорусского", "болгарского", "бихарского", "бислама", "бамана", "бенгальского", "тибетского", "бретонского", "боснийского", "каталанского", "чеченского", "чаморро", "мандаринского", "корсиканского", "чешского", "церковнославянского (старославянского)", "чувашского", "валлийского", "датского", "немецкого", "мальдивского", "дзонг-кэ", "эве", "греческого", "английского", "эсперанто", "испанского", "эстонского", "баскского", "персидского", "фулах", "финского", "фиджи", "филиппинского", "фарерского", "французского", "фризского", "ирландского", "шотландского", "галисийского", "гуарани", "гуджарати", "мэнского", "хауса", "иврит", "хинди", "хиримоту", "хорватского", "венгерского", "армянского", "гереро", "интерлингва", "индонезийского", "интерлингве", "игбо", "инупиак", "индонезийского", "исландского", "итальянского", "инуктитут", "японского", "яванского", "яванского", "грузинского", "конго", "кикуйю", "киньяма", "казахского", "гренландского", "кхмерского", "каннада", "корейского", "канури", "кашмири", "курдского", "коми", "корнского", "киргизского", "латинского", "люксембургского", "луганда", "лингала", "лаосского", "литовского", "луба-катанга", "латышского", "мерянского", "малагасийского", "маршалльского", "маори", "македонского", "малаялам", "монгольского", "молдавского", "маратхи", "малайского", "мальтийского", "бирманского", "науру", "северный ндебеле", "непальского", "ндонга", "нидерландского", "новонорвежского", "норвежского", "южный ндебеле", "навахо", "ньянджа", "окситанского", "оджибве", "оромо", "ория", "осетинского", "пенджабского", "пали", "польского", "пушту", "португальского", "кечуа", "ретороманского", "рунди", "румынского", "русского", "руанда", "русинкского", "санскрит", "сардинского", "синдхи", "санго", "сербохорватского", "сингальского", "словацкого", "словенского", "самоанского", "шона", "сомали", "албанского", "сербского", "свази", "сесото", "сунданского", "шведского", "суахили", "тамильского", "телугу", "таджикского", "тайского", "тигринья", "туркменского", "тагальского", "тсвана", "тонганского", "турецкого", "тсонга", "татарского", "тви", "таитянского", "уйгурского", "украинского", "урду", "узбекского", "венда", "вьетнамского", "волапюк", "волоф", "коса", "идиш", "йоруба", "чжуанского", "китайского", "зулу"];

 var mLang2 = ["Афарский", "Абхазский", "Авестийский", "Африкаанс", "Акан", "Амхарский", "Арабский", "Ассамский", "Аварский", "Аймара", "Азербайджанский", "Башкирский", "Белорусский", "Болгарский", "Бихарский", "Бислама", "Бамана", "Бенгальский", "Тибетский", "Бретонский", "Боснийский", "Каталанский", "Чеченский", "Чаморро", "Мандаринский", "Корсиканский", "Чешский", "Церковнославянский (Старославянский)", "Чувашский", "Валлийский", "Датский", "Немецкий", "Мальдивский", "Дзонг-кэ", "Эве", "Греческий", "Английский", "Эсперанто", "Испанский", "Эстонский", "Баскский", "Персидский", "Фулах", "Финский", "Фиджи", "Филиппинский", "Фарерский", "Французский", "Фризский", "Ирландский", "Шотландский", "Галисийский", "Гуарани", "Гуджарати", "Мэнский", "Хауса", "Иврит", "Хинди", "Хиримоту", "Хорватский", "Венгерский", "Армянский", "Гереро", "Интерлингва", "Индонезийский", "Интерлингве", "Игбо", "Инупиак", "Индонезийский", "Исландский", "Итальянский", "Инуктитут", "Японский", "Яванский", "Яванский", "Грузинский", "Конго", "Кикуйю", "Киньяма", "Казахский", "Гренландский", "Кхмерский", "Каннада", "Корейский", "Канури", "Кашмири", "Курдский", "Коми", "Корнский", "Киргизский", "Латинский", "Люксембургский", "Луганда", "Лингала", "Лаосский", "Литовский", "Луба-катанга", "Латышский", "Мерянский", "Малагасийский", "Маршалльский", "Маори", "Македонский", "Малаялам", "Монгольский", "Молдавский", "Маратхи", "Малайский", "Мальтийский", "Бирманский", "Науру", "Северный ндебеле", "Непальский", "Ндонга", "Нидерландский", "Новонорвежский", "Норвежский", "Южный ндебеле", "Навахо", "Ньянджа", "Окситанский", "Оджибве", "Оромо", "Ория", "Осетинский", "Пенджабский", "Пали", "Польский", "Пушту", "Португальский", "Кечуа", "Ретороманский", "Рунди", "Румынский", "Русский", "Руанда", "Русинкский", "Санскрит", "Сардинский", "Синдхи", "Санго", "Сербохорватский", "Сингальский", "Словацкий", "Словенский", "Самоанский", "Шона", "Сомали", "Албанский", "Сербский", "Свази", "Сесото", "Сунданский", "Шведский", "Суахили", "Тамильский", "Телугу", "Таджикский", "Тайский", "Тигринья", "Туркменский", "Тагальский", "Тсвана", "Тонганский", "Турецкий", "Тсонга", "Татарский", "Тви", "Таитянский", "Уйгурский", "Украинский", "Урду", "Узбекский", "Венда", "Вьетнамский", "Волапюк", "Волоф", "Коса", "Идиш", "Йоруба", "Чжуанский", "Китайский", "Зулу"];

 // * В массивах современный список языков с коротким кодом (178 шт.) + 5 языков с устаревшим кодом.


 var bookLang = mDesc.tiLang.value;        //  Получение кода языка книги.

 var Jazyk = "";    //  Блок текста.

 if (bookLang != ""  &&  bookLang != "ru") {     //  Если язык книги не русский...
         Length = mLangCode.length;
         for (k=0; k<Length; k++)                                //  Просматриваем известный список кодов.
                 if (mLangCode[k] == bookLang) {      //  И если язык книги есть в этом списке...
                         Jazyk = " " + mLang2[k] + "\n";   //  заполняем блок текста расшифрованным кодом
                         break;                                                    //  и выходим из цикла.
                         }
         if (Jazyk == "")                                                //  Если код не найден...
                 Jazyk = " <" + bookLang + ">\n";    //  заполняем блок текста   кодом языка.
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ЛИТЕРАТУРНАЯ СЕРИЯ

 mDiv = mDesc.tiSeq.getElementsByTagName("DIV");  //  массив с узлами "DIV" (каждый узел посвящен отдельной серии).

 var seqName;       //  Имя.
 var seqNumber;    //  Номер.
 var seq_1;                   //  Имя + Номер.
 var otstup_seq="";    //  Отступ серии.
 var seqS_1 = "";            //  Список серий.
 var count_Seq_1 = 0;    //  Счетчик серий.

 for (j=0; j<mDiv.length; j++) {                        //  Просмотр всех разделов "DIV" по очереди.
         div=mDiv[j];
         seqName=div.children.name.value;               //  Получение имени серии из дочерних* элементов.  (* чтобы отсечь данные вложенной, т.е. ещё одной возможной серии)
         seqNumber=div.children.number.value;      //  Получение номера серии из дочерних элементов.
         seq_1="";
         if (seqName != "")  seq_1 += seqName;           //  Добавляем к полной записи серии ее имя (если оно есть).
         if (seqNumber != "")                                                        //  Если есть номер серии...
                 seqNumber = seqNumber.replace(/^0+/, "");   //  удаляем первые нули в номере.
         if (seqNumber != "") {                                     //  Если после этого номер серии сохранился...
                 if (seqName != "")  seq_1 += "  – ";      //  добавляем к полной записи серии тире (если у серии есть ещё и имя)
                 seq_1 += seqNumber;                            //  и номер.
                 }
         if (seq_1 != "") {                          //  Если есть полная запись серии...
                 otstup_seq=" ";                          //  то сначала определяем отступ для нее.
                 divUp = div.parentNode;                       //  Для этого поднимаемся на один уровень вверх.
                 while (divUp.nodeName =="DIV") {      //  И пока верхний уровень является разделом "DIV", т.е. разделом для ещё одной серии....
                         divUp = divUp.parentNode;             //  поднимаемся на следующий уровень,
                         otstup_seq += "     ";                              //  и с каждым уровнем увеличиваем отступ.
                         }
                 count_Seq_1++;                                           //  Затем увеличиваем счетчик.
                 seqS_1 += otstup_seq + seq_1 + "\n";   //  И добавляем полученную серию в список.
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ДАТА СОЗДАНИЯ

 var bookDate= mDesc.tiDate.value;    //  Получение даты создания.

 if (bookDate != "")                                                   //  Если она есть...
         bookTitle += " <" + bookDate + ">\n";   //  то добавляем её к названию.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ПЕРЕВОДЧИКИ

 mDiv = mDesc.tiTrans.getElementsByTagName("DIV");  //  массив с узлами "DIV" (каждый узел посвящен отдельному переводчику)

 var translatorName;            //  Полное имя.
 var Perevodchiki = "";          //  Список имён.
 var count_Translator = 0;   //  Счетчик переводчиков.

 Length = mDiv.length;
 for (j=0; j<Length; j++) {                            //  Просмотр всех разделов "DIV" по очереди.
         div = mDiv[j];
         firstName=div.all.first.value;               //  Получение имени.
         middleName=div.all.middle.value;   //  Получение отчества.
         lastName=div.all.last.value;                 //  Получение фамилии.
         translatorName="";
         if (firstName != "")  translatorName += " " + firstName;               //  Имя.
         if (middleName != "")  translatorName += " " + middleName;   //  Имя + Отчество.
         if (lastName != "")  translatorName += " " + lastName;                  //  Имя + Отчество + Фамилия.
         if (translatorName != "") {                                                                                     //  Если есть полное имя...
                 count_Translator++;                                                                                            //  увеличение счетчика
                 if (count_Translator <= MaxAuthor) Perevodchiki += translatorName + "\n";   //  и добавляем это имя в список авторов (если это имя не будет лишним).
                     else {                                                             //  А если оно всё-таки лишнее...
                         Perevodchiki += " и другие\n";    //  то добавляем соответствующий текст,
                         count_Translator = Length;   //  присваиваем счетчику не совсем точное число авторов
                         break;                                                       //  и выходим из цикла.
                         }
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ПЕРЕВЕДЕННОЙ ЯЗЫК

 var bookSrcLang = mDesc.tiSrcLang.value;             //  Получение кода языка оригинальной книги.

 var Perevod = "";    //  Блок текста.

 if (bookSrcLang != ""  &&  bookLang != bookSrcLang) {    //  Если язык оригинальной книги не совпадает с языком книги...
         Length = mLangCode.length;
         for (k=0; k<Length; k++)                                               //  Просматриваем известный список кодов.
                 if (mLangCode[k] == bookSrcLang) {                     //  И если язык книги есть в этом списке...
                         Perevod = " • Перевод с " + mLang1[k];      //  заполняем блок текста расшифрованным кодом
                         break;                                                                        //  и выходим из цикла.
                         }
         if (Perevod == "")                                                                         //  Если код не найден...
                 Perevod = " • Перевод с <" + bookSrcLang + ">";   //  заполняем блок текста кодом языка.
         if (count_Translator != 0)      //  Если в книге указан переводчик...
                 Perevod += ":\n";            //  добавляем двоеточие.
             else  Perevod += "\n";       //  Если нет, то не добавляем.
         }

 if (count_Translator != 0) {                      //  Если в книге указан переводчик...
         if (Perevod == "")                               //  И ещё нет заглавной строки...
                 Perevod = " • Перевод:\n";   //  создаем недостающую строку.
         Perevod += Perevodchiki;             //  А к заглавной строке добавляем список переводчиков.
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ХУДОЖНИКИ

 mDiv = mDesc.ci.getElementsByTagName("DIV");  //  массив с узлами "DIV" раздела <custom-info>.

 var costom_;                   //  Одно из значений <custom-info>.
 var illustrator = "";              //  Одно имя художника.
 var Hudozhniki = "";          //  Список художников.
 var count_illustrator=0;   //  Счетчик имен художников.

 for (j=0; j<mDiv.length; j++) {                          //  Просмотр всех разделов "DIV" по очереди.
         div = mDiv[j];
         costom_ = div.all.type.value;                                             //  Получение заголовка <custom-info>
         if (costom_.search(/^(ml)?illustrator$/i) != -1) {      //  Если это заголовок "illustrator" или "mlillustrator"...
                 count_illustrator++;                                                      //  то увеличиваем счетчик,
                 illustrator = div.all.val.innerHTML;                         //  получаем под заголовком текст, в котором наверняка есть имя художника,
                 illustrator = illustrator.replace(/\s+/g, " ");         //  заменяем все пробельные символы на обычный пробел и
                 illustrator = illustrator.replace(re06, re06_);      //  удаляем пробелы в начале и конце строки.
                 if (illustrator  &&  illustrator.length > 2  &&  illustrator.length < 256)   //  Затем проверяем длину строки, и если она нормальная...
                         Hudozhniki += " " + illustrator + "\n";                                                         //  то добавляем имя художника в список.
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ :  иллюстрации

 var Dopolnitelno = "";        //  Текстовый блок для дополнительной информации.


 mDiv = fbwBody.getElementsByTagName("IMG");   //  Массив с узлами "IMG" из текста книги.

 var count_Img = mDiv.length;              //  Счетчик иллюстраций.

 var textSrc = "";

 for (j=0; j<count_Img; j++)                                            //  Просмотр всех разделов "DIV" по очереди
         textSrc += mDiv[j].src.replace("fbw-internal:", "");   //  для записи всех имен. (понадобятся в следующем разделе скрипта)
 textSrc += "#";

 var  illjustratsij = [ " иллюстрация", " иллюстрации", " иллюстраций" ];

 if (count_Img != 0)                                                                                                      //  Если в книге есть иллюстрации...
         Dopolnitelno += " "+count_Img+ illjustratsij[pad(count_Img)] + "\n";   //  то добавляем соответствующую запись к блоку текста.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ :  обложки

 var count_Cover = 0;          //  Счётчик обложек.

         //  Основная обложка (может быть несколько)
 mDiv = mDesc.tiCover.getElementsByTagName("SELECT");  //  массив с узлами "SELECT"  (каждый узел посвящен отдельной обложке)
 Length = mDiv.length;
 for (j=0; j<Length; j++) {                                          //  Просмотр всех разделов "SELECT" по очереди.
         div = mDiv[j];
         if (div.id == "href"  &&  div.value != "")   //  Если обложка установлена...
                 count_Cover++;                                       //  увеличиваем счетчик
         }

         //  Обложка на оригинальном языке (может быть несколько)
 mDiv = mDesc.stiCover.getElementsByTagName("SELECT");  //  массив с узлами "SELECT"  (каждый узел посвящен отдельной обложке)
 Length = mDiv.length;
 for (j=0; j<Length; j++) {                                            //  Просмотр всех разделов "SELECT" по очереди.
         div = mDiv[j];
         if (div.id == "href"  &&  div.value != "")   //  Если обложка установлена...
                 count_Cover++;                                       //  увеличиваем счетчик
         }

 var  oblozhek = [ " обложка", " обложки", " обложек" ];

 if (count_Cover != 0  &&  Dopolnitelno != "") {                     //  Если в книге есть обложки и иллюстрации...
         Dopolnitelno = Dopolnitelno.replace(/\n$/g, ", ");    //  тогда заменяем разрыв строки в конце "иллюстраций" на запятую.
         if (count_Cover == 1)                                                              //  Если обложка только одна...
                 Dopolnitelno += " обложка\n";                                   //  то добавляем соответствующую запись к блоку текста.
             else  Dopolnitelno += " "+count_Cover+ oblozhek[pad(count_Cover)] + "\n";    //  А если несколько, то другую запись.
         }

 if (count_Cover != 0  &&  Dopolnitelno == "") {                     //  Если в книге есть обложки без иллюстраций...
         if (count_Cover == 1)                                                              //  И обложка только одна...
                 Dopolnitelno += " Обложка\n";                                   //  то добавляем соответствующую запись к блоку текста.
             else  Dopolnitelno += " "+count_Cover+ oblozhek[pad(count_Cover)] + "\n";    //  А если несколько, то другую запись.
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ :  объём текста
                 // * 1 страница  =  2000 символов,  или  35 строк стихотворного текста,  или  0,3 мегапикселей иллюстраций  (≈ 1/20 уч.-изд. л.)

 var ptr;                             //  Раздел параграфа;
 var count_P = 0;            //  Счетчик строк;
 var count_Sim = 0;       //  Счетчик символов;
 var count_Poem = 0;   //  Счетчик строк в стихах;
 var count_V = 0;           //  Счетчик страниц;

 var mP = fbwBody.getElementsByTagName("P");     //  Получение всех строк "fbw_body".
 count_P = mP.length;

 for (jj=0;  jj<count_P;  jj++) {                                  //   Просмотр всех строк по очереди.
         ptr = mP[jj];
         if (ptr.parentNode.className == "stanza")     //  Если строка в стихах...
                 count_Poem++;                                                     //  то увеличиваем счетчик строк.
             else  count_Sim += ptr.innerText.length + 2;   //  А если нет, то увеличиваем счетчик символов.
         }


 var Binobj = mDesc.binobj;   //  Структура вложенных файлов.
 var id;
 var Dims;                                   //  Раздел с размерами изображения одного файла;
 var Pix_1 = 0;                          //  Площадь изображения одного файла;
 var count_Pix = 0;                //  Счетчик пикселей;

 mDiv=Binobj.getElementsByTagName("DIV");  //  массив с узлами "DIV"  (каждый узел посвящен отдельному файлу)
 Length = mDiv.length;
 for (j=0; j<Length; j++) {                                 //  Просмотр всех разделов "DIV" по очереди.
         div = mDiv[j];
         Dims = div.all.dims;                                                                                      //  Получаем раздел с размерами изображения.
         if (Dims  &&  Dims.value.search(/^\d+x\d+$/) != -1) {                                 //  Если он нормальный...
                 var re_Id = new RegExp("#" + div.all.id.value + "(?=#)","g");              //  создаем рег.выражение для поиска имени картинки.
                 if (textSrc.search(re_Id) != -1) {                                                                                      //  Затем ищем её в иллюстрациях, и если она есть...
                         Pix_1 = Dims.value.replace(/x\d+/, "") * Dims.value.replace(/\d+x/, "");   //  то считаем площадь в пикселях,
                         if  (Pix_1 > 300000)  Pix_1 = 300000;                                           //  уменьшаем слишком крупное значение
                         count_Pix += Pix_1 * textSrc.match(re_Id).length;          //  и увеличиваем счетчик пикселей (учитывая количество одинаковых иллюстраций).
                         }
                 }
         }


 count_V = count_Poem/35 + count_Sim/2000 + count_Pix/300000;          //  Подсчет страниц
 if (count_V != 0)  count_V = Math.ceil(count_V);                                           //  и их округление в большую сторону.

 var stranits = [ " условная бумажная страница", " условные бумажные страницы", " условных бумажных страниц" ];

 if (count_V != 0)                                                                                                 //  Если в книге есть страницы...
         Dopolnitelno += " " + count_V + stranits[pad(count_V)] + "\n";   //  то добавляем соответствующую запись к блоку текста.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ПЕЧАТНОЕ ИЗДАНИЕ :  1-я строка

 var Pechatnoe_izdanie = "";   //  Блок текста для информации о печатном издании.


         //  2-я часть 1-й строки

 var pechatnoeCity = mDesc.piCity.value;               //  Получение названия города.
 if (pechatnoeCity != "")                                                       //  Если оно есть...
         Pechatnoe_izdanie += " " + pechatnoeCity + ":";   //  то добавляем его в блок текста.

 var pechatnoePub = mDesc.piPub.value;               //  Получение названия издательства.
 if (pechatnoePub != "")                                                       //  Если оно есть...
         Pechatnoe_izdanie += " " + pechatnoePub + ",";   //  то добавляем его в блок текста.

 var pechatnoeYear = mDesc.piYear.value;               //  Получение года издания.
 if (pechatnoeYear != "")                                                       //  Если оно есть...
         Pechatnoe_izdanie += " " + pechatnoeYear + ".";   //  то добавляем его в блок текста.

 if (Pechatnoe_izdanie != "")                                                             //  Если блок текста заполнился...
         Pechatnoe_izdanie = Pechatnoe_izdanie.replace(/.$/g, "").replace(/([^\.])$/g, "$1.") + "\n";  //  Удаляем последний знак препинания, и добавляем точку.


         //  1-я часть 1-й строки

 var pechatnoeName = mDesc.piName.value;             //  Получение названия бумажной книги.

 if (pechatnoeName != "") {                                                                                    //  Если оно есть...
         pechatnoeName = pechatnoeName.replace(/([^\.])$/g, "$1.");          //  то добавляем в конце точку.
         if (Pechatnoe_izdanie != "")                                                                                          //  Если в блоке текста есть запись о городе/издательстве/дате...
                 Pechatnoe_izdanie = " " + pechatnoeName + " —" + Pechatnoe_izdanie;   //  то соединяем название и эту запись через тире.
             else  Pechatnoe_izdanie = " " + pechatnoeName + "\n";                                        //  А если нет, то добавляем название в блок текста.
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ПЕЧАТНОЕ ИЗДАНИЕ :  Серии

 mDiv = mDesc.piSeq.getElementsByTagName("DIV");  //  массив с узлами "DIV" (каждый узел посвящен отдельной серии).

 var seq_2;                   //  Имя + Номер.
 var seqS_2 = "";            //  Список серий.
 var count_Seq_2 = 0;    //  Счетчик серий.

 for (j=0; j<mDiv.length; j++) {                        //  Просмотр всех разделов "DIV" по очереди.
         div=mDiv[j];
         seqName=div.children.name.value;               //  Получение имени серии из дочерних* элементов.  (* чтобы отсечь данные вложенной, т.е. ещё одной возможной серии)
         seqNumber=div.children.number.value;      //  Получение номера серии из дочерних элементов.
         seq_2="";
         if (seqName != "")  seq_2 += " " + seqName;           //  Добавляем к полной записи серии ее имя (если оно есть).
         if (seqNumber != "")                                                           //  Если есть номер серии...
                 seqNumber = seqNumber.replace(/^0+/, "");   //  удаляем первые нули в номере.
         if (seqNumber != "") {                                     //  Если после этого номер серии сохранился...
                 if (seqName != "")  seq_2 += "  – ";      //  добавляем к полной записи серии тире (если у серии есть ещё и имя)
                 seq_2 += seqNumber;                            //  и номер.
                 }
         if (seq_2 != "") {                         //  Если есть полная запись серии...
                 count_Seq_2++;                //  увеличиваем счетчик
                 seqS_2 += seq_2 + ", ";   //  и добавляем полученную серию в список (через запятую).
                 }
         }

 if (count_Seq_2 != 0) {                                                      //  Если в книге есть серии...
         seqS_2 = seqS_2.replace(/, $/g, "")                       //  удаляем последнюю запятую.
         if (count_Seq_2 == 1)                                                 //  Если эта серия одна...
                 Pechatnoe_izdanie += " (серия: " + seqS_2 + ")\n";        //  то добавляем в блок текста соответствующую запись.
             else  Pechatnoe_izdanie += " (серии: " + seqS_2 + ")\n";  //  А если серий несколько, то немного другую запись.
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ПЕЧАТНОЕ ИЗДАНИЕ :  Последняя строка и окончательная сборка

         //  Последняя строка

 var pechatnoeISBN = mDesc.piISBN.value;             //  Получение кода ISBN.

 if (pechatnoeISBN!= "")                                                                          //  Если он есть...
         Pechatnoe_izdanie += " ISBN " + pechatnoeISBN + "\n";   //  то добавляем его в блок текста.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// АННОТАЦИЯ

 var Annotatsija = "";   //  Блок аннотации.
 var Ann_ = "";               //  Пробный текст аннотации.

 var mP = [];      //  Массив строк.
 var s="";            //  Текст строки.
 var ks="    ";    //  Красная строка.

 if ((Dlina+"").search(/^\d+$/) != -1  &&  +Dlina > 0)       //  Коррекция длины аннотации
         Dlina += ks.length;
     else  Dlina = 1000;

 var re11 = new RegExp("^([^\\\t]{"+Dlina+"})([^\\\t]{0,400}?[А-яA-Za-zЁё]{2}[…\\\.\\\?!\\\n]{1,10}|[^\\\t]{0,100}\\\s|)[^\\\t]{0,}$","");    //  Сокращение длины аннотации.
 var re11_ = "$1$2";
 var re12 = new RegExp("\\\s{0,10}$","");    //  Добавление многоточия.
 var re12_ = " <…>";

 if (fbwBody.firstChild.className == "annotation") {     //  Если первый раздел - это аннотация:
         mP = fbwBody.firstChild.getElementsByTagName("P");                        //  Получаем массив строк аннотации.
         Length = mP.length;
         for (k=0; k<Length; k++) {                                       //  Просмотр всех строк по очереди.
                 s = mP[k].innerHTML;                                      //  Получаем текст строки.
                 if (s.search("<") != -1)  s=s.replace(re02, re02_);                 //  Удаление ссылок.
                 if (s.search("<") != -1)  s=s.replace(re03, re03_);                 //  Удаление тегов.
                 if (s.search(nbspEntity) != -1)  s=s.replace(re05, re05_);   //  Замена символов н/р пробела на обычный неразрывный пробел.
                 if (s.search("&") != -1) {                   //  Замена кодов на обычные символы:
                         s = s.replace(/&nbsp;/g, " ");     //  код н/р пробела;
                         s = s.replace(/&lt;/g, "<");          //  код символа "<";
                         s = s.replace(/&gt;/g, ">");         //  код символа ">";
                         s = s.replace(/&shy;/g, "­");       //  код мягкого дефиса;
                         s = s.replace(/&amp;/g, "&");   //  код символа "&".
                         }
                 if (s.search(re06) != -1)  s=s.replace(re06, re06_);   //  Удаление начальных и конечных пробелов.
                 if (s != "")                                                            //  Если строка не пустая...
                         Annotatsija += ks + s + "\n";                //  добавляем к блоку аннотации эту строку.
                 if (s == ""  &&  Annotatsija.search(/.\n$/) != -1)   //  Если строка пустая и блок аннотации заканчивается заполненной строкой...
                         Annotatsija += "\n";                                               //  добавляем к блоку пустую строку.
                 if (Annotatsija.length > Dlina + 500)  break;      //  Если полученный текст достаточно большой, то выходим из цикла.
                 }
         if (Annotatsija != "")                                                              //  Если блок аннотации заполнен...
                 Annotatsija = Annotatsija.replace(/\n+$/, "");   //  то удаляем последние разрывы строк.
         if (Annotatsija.length > Dlina) {                               //  Если блок аннотации слишком длинный...
                 Ann_ = Annotatsija.replace(re11, re11_);    //  пробуем его обрезать,
                 if (Ann_ != Annotatsija)
                         Ann_ = Ann_.replace(re12, re12_);   //  при необходимости добавляем в конце многоточие
                 Annotatsija = Ann_ ;                                     //  и окончательно утверждаем обработанный вариант блока аннотации.
                 }
         if (Annotatsija != "")  Annotatsija += "\n";   //  Возвращаем разрыв строки.
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОГЛАВЛЕНИЕ :  Функция для обработки одного раздела DIV

 var otstup="";          //  Отступ заголовков.
 var textTitle;              //  Текст всего заголовка.
 var count_Title=0;   //  Счетчик заголовков.
 var Oglavlenie="";   //  Текст оглавления.
 var Stihi = count_Poem/count_P > 0.7;       //  Лирическая направленность книги.


 function HandleDIV(div) {

     divUp = div.parentNode;                               //  Раздел над строкой.

     if (div.className == "title"  &&  (divUp.className.search(/^(section|body)$/) != -1  ||  Stihi  &&  divUp.className.search(/^(poem|stanza)$/) != -1)) {
                                                 //  Если полученный раздел - это заголовок, расположенный внутри секции, "body" или в стихах стихотворного сборника:

             count_Title++;    //  Увеличиваем счетчик.

             //  Определяем величину отступа для заголовка.
             otstup=" ";
             while (divUp.className.search(/^(section|poem|stanza)$/) != -1) {   //  Пока верхний уровень является секцией или стихом...
                     divUp = divUp.parentNode;                 //  поднимаемся на следующий уровень,
                     otstup += "     ";                                          //  и с каждым уровнем увеличиваем отступ.
                     }

             //  Строки заголовка.
             textTitle="";
             mP = div.getElementsByTagName("P");    //  Получаем массив со строками заголовка.
             for (k=0; k<mP.length; k++) {                              //  Просмотр всех строк по очереди.
                     s = mP[k].innerHTML;                                           //  Получаем текст строки.
                     if (Dizajn == 1  &&  s.search("<IMG") != -1)  s=s.replace(re01, re01_);   //  Замена внутренних иллюстраций на текст "&&&".
                     if (s.search("<") != -1)  s=s.replace(re02, re02_);                                             //  Удаление ссылок.
                     if (s.search("<") != -1)  s=s.replace(re03, re03_);                                             //  Удаление тегов.
                     if (Dizajn == 1  &&  s.search("&&&") != -1)  s=s.replace(re04, re04_);    //  Замена "&&&" на текст "<иллюстрация>".
                     if (s.search(nbspEntity) != -1)  s=s.replace(re05, re05_);                            //  Замена символов н/р пробела на обычный неразрывный пробел.
                     if (s.search("&") != -1) {                   //  Замена кодов на обычные символы:
                             s = s.replace(/&nbsp;/g, " ");     //  код н/р пробела;
                             s = s.replace(/&lt;/g, "<");          //  код символа "<";
                             s = s.replace(/&gt;/g, ">");         //  код символа ">";
                             s = s.replace(/&shy;/g, "­");       //  код мягкого дефиса;
                             s = s.replace(/&amp;/g, "&");   //  код символа "&".
                             }
                     if (s.search(re06) != -1)  s=s.replace(re06, re06_);   //  Удаление начальных и конечных пробелов.

                     if (s == "") {                                                                       //  Если строка пустая...
                             if (Dizajn == 1)  s="<пустая строка>";       //  Замена пустой строки на соответствующий текст (для разряженного дизайна).
                                 else  continue;                                                   //  Или пропуск пустой строки (для сжатого дизайна).
                             }

                     if (Dizajn == 1  ||  otstup == " ")    //  Если выбран разряженный дизайн, или это заголовок "body"...
                             textTitle += otstup + s + "\n";    //  то при добавлении к текстовому блоку, строка заголовка завершается разрывом строки.
                         else {                                                    //  А если выбран сжатый дизайн, то все строки заголовка собираются в одну строку.
                             if (textTitle == "")
                                     textTitle += otstup + s;
                                 else  textTitle += "     • " + s;   //  И между ними добавляется маркер-разделитель.
                             }
                     }
             //  Текст оглавления
             if (textTitle != "") {
                     if (Dizajn == 1  ||  otstup != " ")         //  Если выбран разряженный дизайн, или это не заголовок "body"...
                             Oglavlenie += textTitle + "\n";   //  то добавляется разрыв строки (в "разряженном" это будет пустая строка, а в "сжатом" - завершением строки)
                         else  Oglavlenie += textTitle;           //  А если это заголовок "body" в сжатом дизайне, то разрыв строки не добавляется, так как он уже добавлен ранее.
                     }
             }

     }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОГЛАВЛЕНИЕ + примечания и комментарии

 var mChild = fbwBody.children;     //  Получение всех первых разделов "fbw_body".

 var divBody;                       //  Один из корневых узлов "DIV".
 var count_Notes = 0;           //  Счетчик секций примечаний.
 var count_Comments = 0;   //  Счетчик секций комментариев.

 for (jj=0;  jj<mChild.length;  jj++) {            //  Последовательный просмотр этих разделов.
         divBody =   mChild[jj];
         //  Далее условие для выбора раздела "DIV", который если бы имел class=body, то не имел бы названия "notes" или "comments".
         if (divBody.nodeName == "DIV"  &&  (divBody.className != "body"  ||  divBody.className == "body"  &&  divBody.getAttribute("fbname") != "notes"  &&  divBody.getAttribute("fbname") != "comments")) {
                 mDiv = divBody.getElementsByTagName("DIV");     //  Массив с узлами "DIV" внутри корневого раздела.
                 Length = mDiv.length;
                 for (j=0;  j<Length;  j++) {                                      //  Последовательный просмотр этих разделов.
                         div = mDiv[j];
                         HandleDIV(div);                        //  Обработка полученного раздела "DIV" с помощью функции "HandleDIV";
                         }
                 }
         //  Далее условие для выбора раздела с примечаниями.
         if (divBody.nodeName == "DIV"  &&  divBody.className == "body"  &&  divBody.getAttribute("fbname") == "notes") {
                 mDiv = divBody.getElementsByTagName("DIV");          //  массив с узлами "DIV" внутри раздела с примечаниями.
                 Length = mDiv.length;
                 for (j=0;  j<Length;  j++)                                            //  Последовательный просмотр этих разделов.
                         if (mDiv[j].className == "section")   //  Если текущий раздел - это секция...
                                 count_Notes++;                                  //  то увеличиваем счетчик.
                 }
         //  Далее условие для выбора раздела с комментариями.
         if (divBody.nodeName == "DIV"  &&  divBody.className == "body"  &&  divBody.getAttribute("fbname") == "comments") {
                 mDiv = divBody.getElementsByTagName("DIV");          //  массив с узлами "DIV" внутри раздела с комментариями.
                 Length = mDiv.length;
                 for (j=0;  j<Length;  j++)                                             //  Последовательный просмотр этих разделов
                         if (mDiv[j].className == "section")   //  Если текущий раздел - это секция...
                                 count_Comments++;                       //  то увеличиваем счетчик.
                 }
         }

 if (Oglavlenie != ""  &&  Dizajn == 1)                          //  Если блок оглавления заполнен и выбран "разряженный" дизайн...
         Oglavlenie = Oglavlenie.replace(/\n$/, "");   //  то удаляем последнюю пустую строку.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ПРИМЕЧАНИЯ И КОММЕНТАРИИ (продолжение)

 var  primechanij = [ " примечание", " примечания", " примечаний" ];
 var  kommentariev = [ " комментарий", " комментария", " комментариев" ];
 var  SektsiiSnosok = "";                       //  Блок текста для примечаний и комментариев.

 if (count_Notes != 0)                                                                                                                       //  Если есть секции с примечаниями...
         SektsiiSnosok += " " + count_Notes + primechanij[pad(count_Notes)] + "\n";   //  то добавляем в блок текста строку с их количеством.

 if (count_Comments != 0) {                                         //  Если есть секции с комментариями...
         if (count_Notes != 0  &&  Dizajn == 1)            //  то при условии, что есть секции с примечаниями, и выбран "разряженный" дизайн...
                 SektsiiSnosok += "\n";                                  //  сначала в блок текста добавляем пустую строку,
         SektsiiSnosok += " " + count_Comments + kommentariev[pad(count_Comments)] + "\n";   //  и только после этого - строку с количеством комментариев.
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОКНО РЕЗУЛЬТАТОВ  :  Текущее время и дата

 var currentFullDate = new Date();     //  Получение структуры полной даты.

 var currentHours = currentFullDate.getHours();
 var currentMinutes = currentFullDate.getMinutes();
 var currentSeconds = currentFullDate.getSeconds();

 if (currentMinutes<10) currentMinutes = "0" + currentMinutes;
 if (currentSeconds<10) currentSeconds = "0" + currentSeconds;

 var currentDay = currentFullDate.getDate();
 var currentMonth = 1+currentFullDate.getMonth();
 var currentYear = currentFullDate.getFullYear();

 if (currentMonth<10) currentMonth = "0" + currentMonth;
 currentYear = (currentYear+"").replace(/^.*?(\d{1,2})$/g, "$1");

 var currentTime = currentHours + ":" + currentMinutes + ":" + currentSeconds;
 var currentDate = currentDay + "." + currentMonth + "." + currentYear;

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОКНО РЕЗУЛЬТАТОВ  :  Подсчет чистого компьютерного времени, потраченного на обработку текста

 var Tf=new Date().getTime();
 var tempus=0;

 var T2=(Tf-Ts);
 var Tmin  = Math.floor((T2)/60000);
 var TsecD = ((T2)%60000)/1000;
 var Tsec = Math.floor(TsecD);

 if (Tmin ==0)
         tempus = (+(TsecD+"").replace(/(.{1,5}).*/g, "$1")+"").replace(".", ",")+" сек";
     else {
             tempus = Tmin+" мин";
             if (Tsec !=0)
                     tempus += " " + Tsec+ " с" }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 // Демонстрационный режим "Показать все строки"

 var VseStroki_on_off = 0;      // 0 ; 1 //      ("0" — отключить, "1" — включить)

 var d=0;
 if (VseStroki_on_off ==1)  d="показать всё";

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОКНО РЕЗУЛЬТАТОВ  :  Сборка массива с результатами обработки

 var count=0;

 //  Функция для добавления маркера-индикатора для не пустого значения.
 function Mark(count) {
         if (!count)  return "   ";
             else  return "· ";
         }

 //  Функция для добавления слов "есть" / "нет".
 function Counter(count) {
         if (! count)  return "<нет>";
             else  if (typeof(count) != "number")  return "<есть>";
                 else  return count;
         }

 var mSt=[];   //  Массив строк с результатами обработки.
 var ind=0;    //  Индекс элемента массива.

 mSt[ind]=" «Информацию о книге – в буфер обмена» v."+NumerusVersion;  ind++;
 mSt[ind]="-----------------------------------------------------------------     ";  ind++;
 mSt[ind]="";  ind++;

                                                            mSt[ind]="• СТАТИСТИКА:				";  ind++;
                                                            mSt[ind]=Mark(tempus) +                     "Время выполнения     	" + tempus;  ind++;
                                                            mSt[ind]=Mark(count_Author) +          "Авторы  .  .  .  .  .  .  .  .  .	" + Counter(count_Author);  ind++;
                                                            mSt[ind]=Mark(bookTitle) +                 "Название  .  .  .  .  .  .  .  .	" + Counter(bookTitle);  ind++;
 if (bookDate !="" || d)               { mSt[ind]=Mark(bookDate) +                 "Дата написания   .  .  .  .	" + Counter(bookDate);  ind++ }
 if (count_Seq_1 != d)                 { mSt[ind]=Mark(count_Seq_1) +            "Серия .  .  .  .  .  .  .  .  .  .	" + Counter(count_Seq_1);  ind++ }
                                                            mSt[ind]=Mark(bookLang) +                 "Язык книги  .  .  .  .  .  .  .	" + Counter(bookLang);  ind++;
 if (Annotatsija !=""  ||  d) {       mSt[ind]=Mark(Annotatsija) +              "Аннотация   .  .  .  .  .  .  .	" + Counter(Annotatsija);  ind++ }
                                                            mSt[ind]=Mark(count_Genre) +            "Жанр  .  .  .  .  .  .  .  .  .  .	" + Counter(count_Genre);  ind++;
 if (bookSrcLang !="" || d)         { mSt[ind]=Mark(bookSrcLang) +           "Язык оригинала   .  .  .  .	" + Counter(bookSrcLang);  ind++ }
 if (count_Translator != d)        { mSt[ind]=Mark(count_Translator) +   "Переводчики .  .  .  .  .  .	" + Counter(count_Translator);  ind++ }
 if (count_illustrator != d)         { mSt[ind]=Mark(count_illustrator) +    "Художники  .  .  .  .  .  .  .	" + Counter(count_illustrator);  ind++ }
 if (count_Img != d)                     { mSt[ind]=Mark(count_Img) +                "Иллюстрации .  .  .  .  .  .	" + Counter(count_Img);  ind++ }
 if (count_Cover != d)                 { mSt[ind]=Mark(count_Cover) +            "Обложка   .  .  .  .  .  .  .  .	" + Counter(count_Cover);  ind++ }
 if (count_V != d)                          { mSt[ind]=Mark(count_V) +                     "Страницы .  .  .  .  .  .  .  .	" + Counter(count_V);  ind++ }
 if (Pechatnoe_izdanie!=""||d) { mSt[ind]=Mark(Pechatnoe_izdanie) +"Печатное издание  .  .  .	" + Counter(Pechatnoe_izdanie);  ind++ }
                                                            mSt[ind]=Mark(count_Title) +                "Заголовки .  .  .  .  .  .  .  .	" + Counter(count_Title);  ind++;
 if (count_Notes != d)                 { mSt[ind]=Mark(count_Notes) +             "Примечания   .  .  .  .  .  .	" + Counter(count_Notes);  ind++ }
 if (count_Comments != d)       { mSt[ind]=Mark(count_Comments) +    "Комментарии .  .  .  .  .  .	" + Counter(count_Comments);  ind++ }


 //  Сборка строк текущей даты и времени
 mSt[ind]="";  ind++;
 mSt[ind]= "• "+currentDate+" • "+currentTime+" •";  ind++;

 mSt[ind]="";  ind++;
 mSt[ind]="-----------------------------------------------------------------";  ind++;
 mSt[ind]=" ◊  Отправить подготовленный текст";  ind++;
 mSt[ind]="                       в буфер обмена?";  ind++;

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ОКНО РЕЗУЛЬТАТОВ  :  Вывод окна результатов на экран

 var st2="";  //  текст результатов

 for  ( k=0; k!=ind; k++ )     //  Последовательный просмотр всех элементов массива строк с результатами обработки.
        st2+=mSt[k]+"\n";      //  Добавление элемента из массива.

         //  Вывод окна результатов (и вопроса о сохранении в буфер)
 if (!AskYesNo(st2))  return;           //  При отрицательном ответе - выход из скрипта.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------


                 /// ФИНАЛЬНАЯ СБОРКА ОСНОВНОГО ТЕКСТА

 var Txt2="";        //  Текст, который отправится в буфер.

 for (w=0; w<mW.length; w++)    //  Просмотр всего массива из "настроек"
         switch (mW[w]) {                 //  и добавление текстового блока в зависимости от значения элемента массива.
                 case "Автор":
                         if (count_Author <= 1)
                                 Txt2 += " • Автор:\n" + Avtory + "\n";
                             else
                                 Txt2 += " • Авторы:\n" + Avtory + "\n";
                         break;
                 case "Название":
                         Txt2 += " • Название:\n" + bookTitle + "\n";
                         break;
                 case "Серия":
                         if (count_Seq_1 == 1)
                                 Txt2 += " • Серия:\n" + seqS_1 + "\n";
                         if (count_Seq_1 > 1)
                                 Txt2 += " • Серии:\n" + seqS_1 + "\n";
                         break;
                 case "Язык книги":
                         if (Jazyk != "")
                                 Txt2 += " • Язык книги:\n" + Jazyk + "\n";
                         break;
                 case "Аннотация":
                         if (Annotatsija != "")
                                 Txt2 += " • Аннотация:\n ~~~~~~~~~~~~~~~~~~~~\n" + Annotatsija + " ~~~~~~~~~~~~~~~~~~~~\n\n";
                         break;
                 case "Жанр":
                         Txt2 += " • Жанр:\n" + Zhanry + "\n";
                         break;
                 case "Перевод":
                         if (Perevod != "")
                                 Txt2 += Perevod + "\n";
                         break;
                 case "Художник":
                         if (count_illustrator == 1)
                                 Txt2 += " • Художник:\n" + Hudozhniki + "\n";
                         if (count_illustrator > 1)
                                 Txt2 += " • Художники:\n" + Hudozhniki + "\n";
                         break;
                 case "Дополнительная информация":
                         if (Dopolnitelno != "")
                                 Txt2 += " • Дополнительная информация:\n" + Dopolnitelno + "\n";
                         break;
                 case "Печатное издание":
                         if (Pechatnoe_izdanie != 0)
                                 Txt2 += " • Печатное издание:\n"+ Pechatnoe_izdanie + "\n";
                         break;
                 case "Оглавление":
                         if (Oglavlenie != "")
                                 Txt2 += " • Оглавление:\n ~~~~~~~~~~~~~~~~~~~~\n" + Oglavlenie + "\n";
                         break;
                 case "Примечания и комментарии":
                         if (SektsiiSnosok != "")
                                 Txt2 += SektsiiSnosok + "\n";
                 }

 window.clipboardData.setData("text", Txt2);     //  Отправка полученного текста в буфер обмена.

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------

}



                 ///  ИСТОРИЯ ИЗМЕНЕНИЙ

// v.1.0 — Создание скрипта — Александр Ка (06.03.2025)
// v.1.1 — Добавление аннотации — Александр Ка (09.03.2025)
// v.1.2 — Изменение структуры скрипта, оформления — Александр Ка (11.03.2025)
// v.1.3 — Настройки: Расположение блоков текста — Александр Ка (02.05.2025)







